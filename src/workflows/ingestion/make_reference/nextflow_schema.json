{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "make_reference",
"description": "Build a transcriptomics reference into one of many formats.\n",
"type": "object",
"definitions": {

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "id": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `foo`. ID of the reference",
                "help_text": "Type: `string`, required, example: `foo`. ID of the reference."
            
            }
    

        ,
                "genome_fasta": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz`. Reference genome fasta",
                "help_text": "Type: `file`, required, example: `https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz`. Reference genome fasta."
            
            }
    

        ,
                "transcriptome_gtf": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz`. Reference transcriptome annotation",
                "help_text": "Type: `file`, required, example: `https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz`. Reference transcriptome annotation."
            
            }
    

        ,
                "ercc": {
                "type":
                "string",
                "description": "Type: `file`, example: `https://assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip`. ERCC sequence and annotation file",
                "help_text": "Type: `file`, example: `https://assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip`. ERCC sequence and annotation file."
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "target": {
                "type":
                "string",
                "description": "Type: List of `string`, default: `star`, multiple_sep: `\":\"`, choices: ``cellranger`, `bd_rhapsody`, `star``. Which reference indices to generate",
                "help_text": "Type: List of `string`, default: `star`, multiple_sep: `\":\"`, choices: ``cellranger`, `bd_rhapsody`, `star``. Which reference indices to generate.",
                "enum": ["cellranger", "bd_rhapsody", "star"]
            
            ,
                "default": "star"
            }
    

        ,
                "output_fasta": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_fasta.gz`, example: `genome_sequence.fa.gz`. Output genome sequence fasta",
                "help_text": "Type: `file`, default: `$id.$key.output_fasta.gz`, example: `genome_sequence.fa.gz`. Output genome sequence fasta."
            ,
                "default": "$id.$key.output_fasta.gz"
            }
    

        ,
                "output_gtf": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_gtf.gz`, example: `transcriptome_annotation.gtf.gz`. Output transcriptome annotation gtf",
                "help_text": "Type: `file`, default: `$id.$key.output_gtf.gz`, example: `transcriptome_annotation.gtf.gz`. Output transcriptome annotation gtf."
            ,
                "default": "$id.$key.output_gtf.gz"
            }
    

        ,
                "output_cellranger": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_cellranger.gz`, example: `cellranger_index.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_cellranger.gz`, example: `cellranger_index.tar.gz`. Output index"
            ,
                "default": "$id.$key.output_cellranger.gz"
            }
    

        ,
                "output_bd_rhapsody": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_bd_rhapsody.gz`, example: `bdrhap_index.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_bd_rhapsody.gz`, example: `bdrhap_index.tar.gz`. Output index"
            ,
                "default": "$id.$key.output_bd_rhapsody.gz"
            }
    

        ,
                "output_star": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output_star.gz`, example: `star_index.tar.gz`. Output index",
                "help_text": "Type: `file`, default: `$id.$key.output_star.gz`, example: `star_index.tar.gz`. Output index"
            ,
                "default": "$id.$key.output_star.gz"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "subset_regex": {
                "type":
                "string",
                "description": "Type: `string`, example: `(ERCC-00002|chr1)`. Will subset the reference chromosomes using the given regex",
                "help_text": "Type: `string`, example: `(ERCC-00002|chr1)`. Will subset the reference chromosomes using the given regex."
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        ,
                "param_list": {
                "type":
                "string",
                "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
                "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",
                "hidden": true
            
            }
    

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

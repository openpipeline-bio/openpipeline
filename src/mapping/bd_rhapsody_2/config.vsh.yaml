functionality:
  name: "bd_rhapsody_2"
  namespace: "mapping"
  description: |
    A wrapper for the BD Rhapsody Analysis CWL v2.2 pipeline.

    The CWL pipeline file is obtained by cloning 'https://bitbucket.org/CRSwDev/cwl/src/master/' and removing all objects with class 'DockerRequirement' from the YML.

    The reference_genome and transcriptome_annotation files can be generated with the make_reference pipeline.
    Alternatively, BD also provides standard references which can be downloaded from these locations:

      - Human: https://bd-rhapsody-public.s3.amazonaws.com/Rhapsody-WTA/Pipeline-version2.x_WTA_references/RhapRef_Human_WTA_2023-02.tar.gz
      - Mouse: https://bd-rhapsody-public.s3.amazonaws.com/Rhapsody-WTA/Pipeline-version2.x_WTA_references/RhapRef_Mouse_WTA_2023-02.tar.gz
  info:
    name: BD Rhapsody
    short_description: A wrapper for the BD Rhapsody Analysis CWL v2.2 pipeline
  authors:
    - __merge__: /src/authors/robrecht_cannoodt.yaml
      roles: [ maintainer ]
  argument_groups:
    - name: Inputs
      arguments:
        - name: "--reads"
          type: file
          description: |
            Reads (optional) - Path to your FASTQ.GZ formatted read files from libraries that may include:
            
            - WTA mRNA
            - Targeted mRNA
            - AbSeq
            - Sample Multiplexing
            - VDJ
            
            You may specify as many R1/R2 read pairs as you want.
          required: false
          multiple: true
          example:
            - WTALibrary_S1_L001_R1_001.fastq.gz
            - WTALibrary_S1_L001_R2_001.fastq.gz
          info:
            config_key: Reads
        - name: "--reads_atac"
          type: file
          description: |
            Path to your FASTQ.GZ formatted read files from ATAC-Seq libraries.
            You may specify as many R1/R2/I2 files as you want.
          required: false
          multiple: true
          example:
            - ATACLibrary_S2_L001_R1_001.fastq.gz
            - ATACLibrary_S2_L001_R2_001.fastq.gz
            - ATACLibrary_S2_L001_I2_001.fastq.gz
          info:
            config_key: Reads_ATAC
    - name: References
      description: |
        Assay type will be inferred from the provided reference(s).
        Do not provide both reference_archive and targeted_reference at the same time.
        
        Valid reference input combinations:
          - reference_archive: WTA only
          - reference_archive & abseq_reference: WTA + AbSeq
          - reference_archive & supplemental_reference: WTA + extra transgenes
          - reference_archive & abseq_reference & supplemental_reference: WTA + AbSeq + extra transgenes
          - reference_archive_atac: WTA + ATAC or ATAC only
          - reference_archive_atac & supplemental_reference: WTA + ATAC + extra transgenes
          - targeted_reference: Targeted only
          - targeted_reference & abseq_reference: Targeted + AbSeq
          - abseq_reference: AbSeq only
      arguments:
        - name: "--reference_archive"
          type: file
          description: |
            Path to Rhapsody WTA Reference in the tar.gz format.

            Structure of the reference archive:
            
            - `BD_Rhapsody_Reference_Files/`: top level folder
              - `star_index/`: sub-folder containing STAR index, that is files created with `STAR --runMode genomeGenerate`
              - GTF for gene-transcript-annotation e.g. "gencode.v43.primary_assembly.annotation.gtf"
          example: "RhapRef_Human_WTA_2023-02.tar.gz"
          required: false
          info:
            config_key: Reference_Archive
        - name: "--atac_reference_archive"
          type: file
          description: |
            Path to Rhapsody WTA+ATAC-Seq Reference in the tar.gz format.

            Structure of the reference archive:
            
            - `BD_Rhapsody_Reference_Files/`: top level folder
              - `star_index/`: sub-folder containing STAR index, that is files created with `STAR --runMode genomeGenerate`
              - GTF for gene-transcript-annotation e.g. "gencode.v43.primary_assembly.annotation.gtf"
              - `mitochondrial_contigs.txt`: mitochondrial contigs in the reference genome - one contig name per line. e.g. chrMT or chrM, etc.
              - `bwa-mem2_index/`: sub-folder containing bwa-mem2 index, that is files created with bwa-mem2 index
          example: "RhapRef_Human_WTA_2023-02.tar.gz"
          required: false
          info:
            config_key: Reference_Archive
        - name: "--targeted_reference"
          type: file
          description: |
            Path to the targeted reference file in FASTA format.
          example: "BD_Rhapsody_Immune_Response_Panel_Hs.fasta"
          multiple: true
          info:
            config_key: Targeted_Reference
        - name: "--abseq_reference"
          type: file
          description: Path to the AbSeq reference file in FASTA format.  Only needed if BD AbSeq Ab-Oligos are used.
          example: "AbSeq_reference.fasta"
          multiple: true
          info:
            config_key: AbSeq_Reference
        - name: "--supplemental_reference"
          type: file
          alternatives: [-s]
          description: Path to the supplemental reference file in FASTA format.  Only needed if there are additional transgene sequences to be aligned against in a WTA assay experiment.
          example: "supplemental_reference.fasta"
          multiple: true
          info:
            config_key: Supplemental_Reference
    - name: Outputs
      arguments:
        - name: "--output"
          type: file
          direction: output
          alternatives: [-o]
          description: "Output folder. Output still needs to be processed further."
          required: true
          example: output_dir/
    - name: Putative Cell Calling Settings
      arguments:
        - name: "--cell_calling_data"
          type: string
          description: |
            Specify the dataset to be used for putative cell calling: mRNA, AbSeq, ATAC, mRNA_and_ATAC
            
            For putative cell calling using an AbSeq dataset, please provide an AbSeq_Reference fasta file above.
            
            For putative cell calling using an ATAC dataset, please provide a WTA+ATAC-Seq Reference_Archive file above.
            
            The default data for putative cell calling, will be determined the following way:
            
            - If mRNA Reads and ATAC Reads exist: mRNA_and_ATAC
            - If only ATAC Reads exist: ATAC
            - Otherwise: mRNA
          choices: [mRNA, AbSeq, ATAC, mRNA_and_ATAC]
          example: mRNA
          info:
            config_key: Cell_Calling_Data
        - name: "--cell_calling_bioproduct_algorithm"
          type: string
          description: |
            Specify the bioproduct algorithm to be used for putative cell calling: Basic or Refined
            
            By default, the Basic algorithm will be used for putative cell calling.
          choices: [Basic, Refined]
          example: Basic
          info:
            config_key: Cell_Calling_Bioproduct_Algorithm
        - name: "--cell_calling_atac_algorithm"
          type: string
          description: |
            Specify the ATAC-seq algorithm to be used for putative cell calling: Basic or Refined
            
            By default, the Basic algorithm will be used for putative cell calling.
          choices: [Basic, Refined]
          example: Basic
          info:
            config_key: Cell_Calling_ATAC_Algorithm
        - name: "--exact_cell_count"
          type: integer
          description: |
            Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count
          example: 10000
          min: 1
          info:
            config_key: Exact_Cell_Count
        - name: "--expected_cell_count"
          type: integer
          description: |
            Guide the basic putative cell calling algorithm by providing an estimate of the number of cells expected.  Usually this can be the number of cells loaded into the Rhapsody cartridge.  If there are multiple inflection points on the second derivative cumulative curve, this will ensure the one selected is near the expected. 
          example: 20000
          min: 1
          info:
            config_key: Expected_Cell_Count
    - name: Intronic Reads Settings
      arguments:
        - name: --exclude_intronic_reads
          type: boolean
          description: |
            By default, the flag is false, and reads aligned to exons and introns are considered and represented in molecule counts. When the flag is set to true, intronic reads will be excluded.
            The value can be true or false.
          example: false
          info:
            config_key: Exclude_Intronic_Reads
    - name: Multiplex Settings
      arguments:
        - name: "--sample_tags_version"
          type: string
          description: |
            If Sample Tag Multiplexing was done, specify the appropriate version: human, mouse, flex, nuclei_includes_mrna, nuclei_atac_only

            If this is an SMK + Nuclei mRNA run or an SMK + Multiomic ATAC-Seq (WTA+ATAC-Seq) run (and not an SMK + ATAC-Seq only run), choose the "nuclei_includes_mrna" option.
            If this is an SMK + ATAC-Seq only run (and not SMK + Multiomic ATAC-Seq (WTA+ATAC-Seq)), choose the "nuclei_atac_only" option.
          choices: [human, mouse, flex, nuclei_includes_mrna, nuclei_atac_only]
          example: human
          info:
            config_key: Sample_Tags_Version
        - name: "--tag_names"
          type: string
          description: |
            Specify the tag number followed by '-' and the desired sample name to appear in Sample_Tag_Metrics.csv
            Do not use the special characters: &, (), [], {},  <>, ?, |
          multiple: true
          example: [4-mySample, 9-myOtherSample, 6-alsoThisSample]
          info:
            config_key: Tag_Names
    - name: VDJ arguments
      arguments:
        - name: "--vdj_version"
          type: string
          description: |
            If VDJ was done, specify the appropriate option: human, mouse, humanBCR, humanTCR, mouseBCR, mouseTCR
          choices: [human, mouse, humanBCR, humanTCR, mouseBCR, mouseTCR]
          example: human
          info:
            config_key: VDJ_Version
    - name: ATAC options
      arguments:
        - name: "--predefined_atac_peaks"
          type: file
          description: An optional BED file containing pre-established chromatin accessibility peak regions for generating the ATAC cell-by-peak matrix.
          example: predefined_peaks.bed
          info:
            config_key: Predefined_ATAC_Peaks
    - name: Additional options
      arguments:
        - name: "--run_name"
          type: string
          description: |
            Specify a run name to use as the output file base name. Use only letters, numbers, or hyphens. Do not use special characters or spaces.
          default: sample
          info:
            config_key: Run_Name
        - name: "--generate_bam"
          type: boolean
          description: |
            Specify whether to create the BAM file output
          default: false
          info:
            config_key: Generate_Bam
    - name: Advanced options
      description: |
        NOTE: Only change these if you are really sure about what you are doing
      arguments:
        - name: "--alignment_star_params"
          type: string
          description: |
            Set this parameter to fully override default STAR mapping parameters used in the pipeline.

            For reference this is the default that is used:

            ```
            --outFilterScoreMinOverLread 0 --outFilterMatchNminOverLread 0 --outFilterMultimapScoreRange 0 --clip3pAdapterSeq AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --seedSearchStartLmax 50 --outFilterMatchNmin 25 --limitOutSJcollapsed 2000000
            ```

            Do NOT set any non-mapping related params like `--genomeDir`, `--outSAMtype`, `--outSAMunmapped`, `--readFilesIn`, `--runThreadN`, etc.

            We use STAR version 2.7.10b.
          example: "--alignIntronMax 6000 --outFilterScoreMinOverLread 0.1 --limitOutSJcollapsed 2000000"
          info:
            config_key: Alignment_STAR_Params
        - name: "--alignment_bwa_mem2_params"
          type: string
          description: |
            Set this parameter to tweak one or more bwa-mem2 mapping parameters used in the pipeline

            The pipeline does not specify any custom mapping params to bwa-mem2 so default values are used

            Do NOT set any non-mapping related params like `-C`, `-t`, etc.

            We use bwa-mem2 version 2.2.1.
          example: "-k 16 -w 200 -r"
          info:
            config_key: Alignment_bwa_mem2_Params
    - name: CWL-runner arguments
      arguments:
        - name: "--parallel"
          type: boolean
          description: "Run jobs in parallel."
          default: true
        - name: "--timestamps"
          type: boolean_true
          description: "Add timestamps to the errors, warnings, and notifications."
        - name: "--dryrun"
          type: boolean_true
          description: "If true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed."
  resources:
    - type: python_script
      path: script.py
    - path: rhapsody_pipeline_2.2_nodocker.cwl 
  # test_resources:
  #   - type: bash_script
  #     path: test_memory.sh
  #   - type: bash_script
  #     path: test_wta.sh
  #   - type: bash_script
  #     path: test_targeted.sh
  #   - path: /resources_test/bdrhap_vdj
  #   - path: /resources_test/bdrhap_5kjrt
  #   - path: /resources_test/reference_gencodev41_chr1/

platforms:
  - type: docker
    # image: ghcr.io/data-intuitive/bd_rhapsody:1.10.1
    image: bdgenomics/rhapsody:2.2
    # setup:
    #   # (1) workaround for debian buster
    #   # https://stackoverflow.com/questions/68802802/repository-http-security-debian-org-debian-security-buster-updates-inrelease
    #   # (2) Update picard (uses old Log4J). It is installed using conda, but 'conda update picard' does not work.
    #   # So download it manually and install
    #   - type: docker
    #     run: apt-get --allow-releaseinfo-change update && 
    #          apt upgrade -y &&
    #          conda install -y -c bioconda picard=2.27.3 certifi=2022.6.15 conda=4.13.0 openssl=1.1.1o ca-certificates=2022
    #   - type: apt
    #     packages: [ procps, nodejs]
    #   - type: python
    #     packages: [cwlref-runner, cwl-runner, ruamel.yaml]
    setup:
      - type: python
        packages:
          - pandas<2
  - type: nextflow
    directives:
      label: [ highmem, highcpu ]

name: viash integration CI

on:
  push:
    branches: [ 'main_build' ]

# Skip older CI runs for pull requests (head_ref exists), otherwise allways build
# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency: 
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # phase 1
  list_components:
    env:
      s3_bucket: s3://openpipelines-data/
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"

    steps:
    - uses: actions/checkout@v2

    - name: Fetch viash
      run: |
        bin/init
        bin/viash -h

    # create cachehash key
    - name: Create hash key
      id: cachehash
      run: |
        AWS_EC2_METADATA_DISABLED=true aws s3 ls $s3_bucket --recursive --no-sign-request > bucket-contents.txt
        echo "::set-output name=cachehash::resources_test_$( md5sum bucket-contents.txt | awk '{ print $1 }' )"
    
    # initialize cache
    - name: Cache resources data
      uses: actions/cache@v3
      with:
        path: resources_test
        key: ${{ steps.cachehash.outputs.cachehash }}
        restore-keys: resources_test_

    # sync if need be
    - name: Sync test resources
      run: |
        bin/viash run \
          -p native \
          src/download/sync_test_resources/config.vsh.yaml -- \
          --input $s3_bucket \
          --delete
        tree resources_test/ -L 3

    # store component locations
    - id: set_matrix
      run: |
        json=$(bin/viash ns list -s workflows --format json | jq -c '[ .[] | { "name": .functionality.name, "config": .info.config, "test_script": .functionality.test_resources[].path, "entry": .functionality.test_resources[].entrypoint } ]')
        echo "::set-output name=matrix::$json"
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      cachehash: ${{ steps.cachehash.outputs.cachehash }}

  # phase 2
  integration_test:
    needs: list_components

    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"

    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.list_components.outputs.matrix) }}

    steps:
    - uses: actions/checkout@v2

    - name: Fetch viash
      run: |
        bin/init
        bin/viash -h

    # build target dir
    # use containers from main_build branch, hopefully these are available
    - name: Build target dir
      run: |
        # force override viash build strategy to not build containers
        sed -i 's#--setup "\\$setup_strat"#--setup donothing#' bin/viash_build

        # build target dir
        bin/viash_build -m release -t main_build

    # use cache
    - name: Cache resources data
      uses: actions/cache@v3
      with:
        path: resources_test
        key: ${{ needs.list_components.outputs.cachehash }}

    - name: Run integration test
      run: |
        # todo: replace with viash test command
        config_dir=`dirname ${{ matrix.component.config }}`
        script="$config_dir/${{ matrix.component.test_script }}"
        bin/nextflow run . \
          -main-script "$script" \
          -entry ${{ matrix.component.entry }} \
          -profile docker,mount_temp \
          -c workflows/utils/labels_ci.config


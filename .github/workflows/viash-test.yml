name: viash test

on:
  pull_request:
  push:
    branches: [ '**' ]

jobs:
  run_ci_check_job:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    runs-on: ubuntu-latest
    outputs:
      run_ci: ${{ steps.github_cli.outputs.check }}
    steps:
      - name: 'Check if branch has an existing pull request and the trigger was a push'
        id: github_cli
        run: |
          pull_request=$(gh pr list -R openpipelines-bio/openpipeline -H ${{ github.ref_name }} --json url --state open --limit 1 | jq '.[0].url')
          # If the branch has a PR and this run was triggered by a push event, do not run
          if [[ "$pull_request" != "null" && "${{ github.event_name == 'push' }}" == "true" ]]; then
            echo "::set-output name=check::false"
          else
            echo "::set-output name=check::true"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GTHB_PAT }}


  # phase 1
  list_components:
    needs: run_ci_check_job
    env:
      s3_bucket: s3://openpipelines-data/
    runs-on: ubuntu-latest
    if: "(!contains(github.event.head_commit.message, 'ci skip')) && needs.run_ci_check_job.outputs.run_ci == 'true'"
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      cachehash: ${{ steps.cachehash.outputs.cachehash }}
    steps:
    - uses: actions/checkout@v3

    - name: Fetch viash
      run: |
        bin/init
        tree .
        bin/viash -h

    # create cachehash key
    - name: Create hash key
      id: cachehash
      run: |
        AWS_EC2_METADATA_DISABLED=true aws s3 ls $s3_bucket --recursive --no-sign-request > bucket-contents.txt
        echo "::set-output name=cachehash::resources_test__$( md5sum bucket-contents.txt | awk '{ print $1 }' )"
    
    # initialize cache
    - name: Cache resources data
      uses: actions/cache@v3
      with:
        path: resources_test
        key: ${{ steps.cachehash.outputs.cachehash }}
        restore-keys: resources_test_

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v29.0.7
      with:
        separator: ";"
        diff_relative: true

    # store component locations
    # json=$(bin/viash ns list -p docker --format json | jq -c '[ .[] | { "name": .functionality.name, "config": .info.config} * (.info.config | capture("^(?<dir>.*\/)")) ]')
    - id: set_matrix
      run: |
        IFS=$';' read -a changed_files <<< "${{ steps.changed-files-comma.outputs.all_changed_files }}"
        readarray -t components < <(bin/viash ns list -p docker --format json | jq -c '[ .[] | (.info.config | capture("^(?<dir>.*\/)").dir) as $dir | { "name": .functionality.name, "config": .info.config, "resources": [ .functionality.resources[].path? , .functionality.test_resources[].path? ] | map($dir + .) }][]')
        declare -a result_array_matrix=()
        for component in "${components[@]}"; do
          readarray -t resources < <(jq -c '.resources[]' <<< "$component")
          for resource_rel_path in "${resources[@]}"; do
            resource_project_path=$(realpath --relative-to="." "$resource_rel_path")
            if [[ " ${changed_files[*]} " =~ " ${resource_project_path} " ]]; then
              result_array_matrix+="$component"
              break
            fi
          done
        done
        json=$(jq -cs '.' <<< "${components[*]}")
        echo "::set-output name=matrix::$json" 
  
    # sync if need be
    - name: Sync test resources
      run: |
        bin/viash run \
          -p native \
          src/download/sync_test_resources/config.vsh.yaml -- \
          --input $s3_bucket \
          --delete
        tree resources_test/ -L 3

  # phase 2
  viash_test:
    needs: list_components

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.list_components.outputs.matrix) }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    - name: Fetch viash
      run: |
        bin/init
        bin/viash -h

    # use cache
    - name: Cache resources data
      uses: actions/cache@v3
      timeout-minutes: 5
      with:
        path: resources_test
        key: ${{ needs.list_components.outputs.cachehash }}

    - name: Run test
      timeout-minutes: 30
      run: |
        bin/viash test -p docker ${{ matrix.component.config }} \
         -c '.functionality.requirements.n_proc := 2' \
         -c '.functionality.requirements.memory := "5gb"'


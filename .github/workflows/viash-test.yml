name: viash test

on:
  pull_request:
  push:
    branches: [ '**' ]

jobs:
  run_ci_check_job:
    runs-on: ubuntu-latest
    outputs:
      run_ci: ${{ steps.github_cli.outputs.check }}
    steps:
      - name: 'Check if branch has an existing pull request and the trigger was a push'
        id: github_cli
        run: |
          pull_request=$(gh pr list -R ${{ github.repository }} -H ${{ github.ref_name }} --json url --state open --limit 1 | jq '.[0].url')
          # If the branch has a PR and this run was triggered by a push event, do not run
          if [[ "$pull_request" != "null" && "$GITHUB_REF_NAME" != "main" && "${{ github.event_name == 'push' }}" == "true" && "${{ !contains(github.event.head_commit.message, 'ci force') }}" == "true" ]]; then
            echo "check=false" >> $GITHUB_OUTPUT
          else
            echo "check=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GTHB_PAT }}

  # phase 1
  list:
    needs: run_ci_check_job
    env:
      s3_bucket: s3://openpipelines-data/
    runs-on: ubuntu-latest
    if: "needs.run_ci_check_job.outputs.run_ci == 'true'"

    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      cache_key: ${{ steps.cache.outputs.cache_key }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    - uses: viash-io/viash-actions/setup@v1

    - uses: viash-io/viash-actions/project/sync-and-cache-s3@restructure_and_extend
      id: cache
      with:
        s3_bucket: $s3_bucket
        dest_path: resources_test
        cache_key_prefix: resources_test__

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v35.5.0
      with:
        separator: ";"
        diff_relative: true

    # store component locations
    - id: ns_list
      uses: viash-io/viash-actions/ns-list@v2
      with:
        platform: docker
        format: json

    - name: Set matrix to only run tests for components that had their config or resources changed.
      id: set_matrix
      run: |
        IFS=$';' read -a changed_files <<< "${{ steps.changed-files.outputs.all_changed_files }}"
        echo "Changed files: ${changed_files[*]}"
        
        # get a list of all viash components and their resources
        jq -c '[ .[] | 
          (.info.config | capture("^(?<dir>.*\/)").dir) as $dir |
          {
            "name": (.functionality.namespace + "/" + .functionality.name),
            "dir": $dir,
            "resources": (
              [.info.config] +
              ([.functionality.resources[].path?] | map($dir + .)) +
              ([.functionality.test_resources[].path?] | map($dir + .))
            )
          }
        ]' "${{ steps.ns_list.outputs.output_file }}" > components.json

        # read as array
        readarray -t components < components.json

        # compare resources against changed files
        declare -a result_array_matrix=()
        for component in "${components[@]}"; do
          readarray -t resources < <(jq -cr '.resources[]' <<< "$component")
          for resource_rel_path in "${resources[@]}"; do
            resource_project_path=$(realpath --relative-to="$GITHUB_WORKSPACE" "$resource_rel_path")
            echo "Checking path $resource_project_path"
            if [[ " ${changed_files[*]} " =~ " ${resource_project_path} " || "$GITHUB_REF" == "refs/heads/main" || "${{ contains(github.event.head_commit.message, 'ci force') }}" == "true" ]]; then
              result_array_matrix+="$component"
              break
            fi
          done
        done
        json=$(jq -cs '.' <<< "${result_array_matrix[*]}")
        echo "matrix=$json" >> $GITHUB_OUTPUT

  # phase 2
  viash_test:
    needs: list
    if: ${{ needs.list.outputs.matrix != '[]' && needs.list.outputs.matrix != '' }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.list.outputs.matrix) }}

    steps:
    - uses: actions/checkout@v3

    - uses: viash-io/viash-actions/setup@v1

    # use cache
    - name: Cache resources data
      uses: actions/cache@v3
      timeout-minutes: 10
      with:
        path: resources_test
        key: ${{ needs.list.outputs.cache_key }}

    - name: Run test
      timeout-minutes: 30
      run: |
        viash ns test \
          --config_mod ".functionality.version := '${{ github.event.inputs.version_tag }}'" \
          -s "${{ matrix.component.dir }}" \
          --cpus 2 \
          --memory "5gb"


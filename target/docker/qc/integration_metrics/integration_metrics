#!/usr/bin/env bash

# integration_metrics integration_build
# 
# This wrapper script is auto-generated by viash 0.8.5 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Dorien Roosen (author)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="integration_metrics"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "integration_metrics integration_build"
  echo ""
  echo "Calculation integration qc metrics and aggregate scores for bio conservation and"
  echo "batch correction."
  echo "The calculated metrics and aggregate scores are stored in the uns column."
  echo "All metric calculations are based on the scib library:"
  echo "  - publication: https://doi.org/10.1038/s41592-021-01336-8"
  echo "  - code: https://github.com/theislab/scib/"
  echo "  - documentation: https://scib.readthedocs.io/"
  echo ""
  echo "Bio conservation metrics:"
  echo "  - nmi_score: scib.metrics.nmi"
  echo "  - ari_score: scib.metrics.ari"
  echo "  - asw_label: scib.metrics.silhouette"
  echo "  - isolated_label_f1: scib.metrics.isolated_labels"
  echo "  - isolated_label_asw: scib.metrics.isolated_labels"
  echo "  - clisi_graph: scib.metrics.clisi_graph"
  echo "Note that the scib bio conservation metrics for cell cycle conservation, HVG"
  echo "conservation and trajectory conservation are not currently provided,"
  echo "as this requires integrated count matrices and pseudo time values to be"
  echo "calculated, which is not currently supported in OpenPipeline."
  echo ""
  echo "Batch correction metrics:"
  echo "  - asw_batch: scib.metrics.silhouette_batch"
  echo "  - pcr_score: scib.metrics.pcr_comparison"
  echo "  - graph_connectivity: scib.metrics.graph_connectivity"
  echo "  - ilisi_graph: scib.metrics.ilisi_graph"
  echo "  - kbet: scib.metrics.kBET"
  echo ""
  echo "Aggregate scores:"
  echo "  - avg_bio: mean of calculated bio conservation metrics"
  echo "  - avg_batch: mean of calculated batch correction metrics"
  echo "  - overall_integration_score: weighted mean of bio and batch scores (60/40"
  echo "ratio)"
  echo ""
  echo "Inputs:"
  echo "    --input"
  echo "        type: file, required parameter, file must exist"
  echo "        example: input.h5mu"
  echo "        Input h5mu file"
  echo ""
  echo "    --modality"
  echo "        type: string"
  echo "        default: rna"
  echo ""
  echo "    --bio_conservation_metrics"
  echo "        type: string, multiple values allowed"
  echo "        default: nmi;ari;asw_label"
  echo "        choices: [ nmi, ari, asw_label, isolated_label_f1, isolated_label_asw,"
  echo "clisi_graph ]"
  echo "        The metrics to be calculated to assess biological conservation."
  echo "        The provided metrics will be aggregated into a biological conservation"
  echo "        score."
  echo ""
  echo "    --batch_correction_metrics"
  echo "        type: string, multiple values allowed"
  echo "        default: asw_batch;pcr;graph_connectivity"
  echo "        choices: [ asw_batch, pcr, graph_connectivity, ilisi_graph, kbet ]"
  echo "        The metrics to be calculated for the batch correction."
  echo "        The provided metrics will be aggregated into a batch correction score."
  echo ""
  echo "Input Annotations:"
  echo "    --obsm_embeddings"
  echo "        type: string, required parameter"
  echo "        example: X_scGPT"
  echo "        The name of the adata.obsm array containing scGPT cell embeddings."
  echo ""
  echo "    --obs_batch_label"
  echo "        type: string, required parameter"
  echo "        example: sample"
  echo "        The name of the adata obs column containing the batch labels."
  echo ""
  echo "    --obs_cell_label"
  echo "        type: string, required parameter"
  echo "        example: cell_type"
  echo "        The name of the adata obs column containing the cell type labels."
  echo ""
  echo "    --obs_cluster"
  echo "        type: string, required parameter"
  echo "        example: cluster"
  echo "        The name of the adata obs column containing the cluster labels."
  echo ""
  echo "    --uns_neighbors"
  echo "        type: string, required parameter"
  echo "        example: neighbors"
  echo "        The name of the adata uns object containing the neighbors information."
  echo ""
  echo "    --obsp_neighbor_connectivities"
  echo "        type: string, required parameter"
  echo "        example: connectivities"
  echo "        The name of the adata obsp object containing the neighbor"
  echo "        connectivities."
  echo ""
  echo "Outputs:"
  echo "    --output"
  echo "        type: file, output, file must exist"
  echo "        example: output.h5mu"
  echo "        Output h5mu file."
  echo ""
  echo "    --output_compression"
  echo "        type: string"
  echo "        example: gzip"
  echo "        choices: [ gzip, lzf ]"
  echo "        The compression format to be used on the output h5mu object."
}

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  tag=$1
  shift 1
  commands="$@"
  save=$-; set +e
  missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$tag' does not contain command '$missing'."
  	exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM rocker/r2u:22.04

ENTRYPOINT []

 
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y procps libhdf5-dev gfortran cmake libopenblas-dev libgeos-dev python3-pip python3-dev python-is-python3 && \
  rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "anndata~=0.9.1" "mudata~=0.2.3" "pandas!=2.1.2"

RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "scib==1.1.5" "rpy2==3.5.16" "anndata2ri"

RUN Rscript -e 'if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")' && \
  Rscript -e 'remotes::install_github(c("theislab/kBET"), repos = "https://cran.rstudio.com")'

RUN cd "$(pip show scib | grep Location | cut -d ' ' -f 2)/scib/knn_graph" && \
g++ -std=c++11 -O3 knn_graph.cpp -o knn_graph.o

LABEL org.opencontainers.image.authors="Dorien Roosen"
LABEL org.opencontainers.image.description="Companion container for running component qc integration_metrics"
LABEL org.opencontainers.image.created="2024-05-05T07:17:08Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
LABEL org.opencontainers.image.revision="5af5dcc142e5fe189a226bcb72063dfecffe5ae7"
LABEL org.opencontainers.image.version="integration_build"

VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-integration_metrics-XXXXXX")
  dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $dockerfile

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile
  else
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
  ViashDockerCheckCommands "$1" 'ps' 'bash'
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "$mount_target/$base_name"
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  ViashDebug "ViashAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashStripAutomount {
  abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#/viash_automount}"
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=()

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "integration_metrics integration_build"
            exit
            ;;
        --input)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --modality)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --modality. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality=*)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality=*\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bio_conservation_metrics)
            if [ -z "$VIASH_PAR_BIO_CONSERVATION_METRICS" ]; then
              VIASH_PAR_BIO_CONSERVATION_METRICS="$2"
            else
              VIASH_PAR_BIO_CONSERVATION_METRICS="$VIASH_PAR_BIO_CONSERVATION_METRICS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bio_conservation_metrics. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bio_conservation_metrics=*)
            if [ -z "$VIASH_PAR_BIO_CONSERVATION_METRICS" ]; then
              VIASH_PAR_BIO_CONSERVATION_METRICS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_BIO_CONSERVATION_METRICS="$VIASH_PAR_BIO_CONSERVATION_METRICS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --batch_correction_metrics)
            if [ -z "$VIASH_PAR_BATCH_CORRECTION_METRICS" ]; then
              VIASH_PAR_BATCH_CORRECTION_METRICS="$2"
            else
              VIASH_PAR_BATCH_CORRECTION_METRICS="$VIASH_PAR_BATCH_CORRECTION_METRICS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --batch_correction_metrics. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --batch_correction_metrics=*)
            if [ -z "$VIASH_PAR_BATCH_CORRECTION_METRICS" ]; then
              VIASH_PAR_BATCH_CORRECTION_METRICS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_BATCH_CORRECTION_METRICS="$VIASH_PAR_BATCH_CORRECTION_METRICS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --obsm_embeddings)
            [ -n "$VIASH_PAR_OBSM_EMBEDDINGS" ] && ViashError Bad arguments for option \'--obsm_embeddings\': \'$VIASH_PAR_OBSM_EMBEDDINGS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBSM_EMBEDDINGS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obsm_embeddings. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obsm_embeddings=*)
            [ -n "$VIASH_PAR_OBSM_EMBEDDINGS" ] && ViashError Bad arguments for option \'--obsm_embeddings=*\': \'$VIASH_PAR_OBSM_EMBEDDINGS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBSM_EMBEDDINGS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_batch_label)
            [ -n "$VIASH_PAR_OBS_BATCH_LABEL" ] && ViashError Bad arguments for option \'--obs_batch_label\': \'$VIASH_PAR_OBS_BATCH_LABEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_BATCH_LABEL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_batch_label. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_batch_label=*)
            [ -n "$VIASH_PAR_OBS_BATCH_LABEL" ] && ViashError Bad arguments for option \'--obs_batch_label=*\': \'$VIASH_PAR_OBS_BATCH_LABEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_BATCH_LABEL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_cell_label)
            [ -n "$VIASH_PAR_OBS_CELL_LABEL" ] && ViashError Bad arguments for option \'--obs_cell_label\': \'$VIASH_PAR_OBS_CELL_LABEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CELL_LABEL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_cell_label. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_cell_label=*)
            [ -n "$VIASH_PAR_OBS_CELL_LABEL" ] && ViashError Bad arguments for option \'--obs_cell_label=*\': \'$VIASH_PAR_OBS_CELL_LABEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CELL_LABEL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_cluster)
            [ -n "$VIASH_PAR_OBS_CLUSTER" ] && ViashError Bad arguments for option \'--obs_cluster\': \'$VIASH_PAR_OBS_CLUSTER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CLUSTER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_cluster. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_cluster=*)
            [ -n "$VIASH_PAR_OBS_CLUSTER" ] && ViashError Bad arguments for option \'--obs_cluster=*\': \'$VIASH_PAR_OBS_CLUSTER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CLUSTER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --uns_neighbors)
            [ -n "$VIASH_PAR_UNS_NEIGHBORS" ] && ViashError Bad arguments for option \'--uns_neighbors\': \'$VIASH_PAR_UNS_NEIGHBORS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_UNS_NEIGHBORS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --uns_neighbors. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --uns_neighbors=*)
            [ -n "$VIASH_PAR_UNS_NEIGHBORS" ] && ViashError Bad arguments for option \'--uns_neighbors=*\': \'$VIASH_PAR_UNS_NEIGHBORS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_UNS_NEIGHBORS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obsp_neighbor_connectivities)
            [ -n "$VIASH_PAR_OBSP_NEIGHBOR_CONNECTIVITIES" ] && ViashError Bad arguments for option \'--obsp_neighbor_connectivities\': \'$VIASH_PAR_OBSP_NEIGHBOR_CONNECTIVITIES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBSP_NEIGHBOR_CONNECTIVITIES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obsp_neighbor_connectivities. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obsp_neighbor_connectivities=*)
            [ -n "$VIASH_PAR_OBSP_NEIGHBOR_CONNECTIVITIES" ] && ViashError Bad arguments for option \'--obsp_neighbor_connectivities=*\': \'$VIASH_PAR_OBSP_NEIGHBOR_CONNECTIVITIES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBSP_NEIGHBOR_CONNECTIVITIES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_compression)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_compression. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_compression=*)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression=*\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS+=("--volume='$2'")
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS+=("--volume='$(ViashRemoveFlags "$2")'")
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck

if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'ghcr.io/openpipelines-bio/qc/integration_metrics:integration_build' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'ghcr.io/openpipelines-bio/qc/integration_metrics:integration_build' ifneedbepullelsecachedbuild

if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/qc/integration_metrics:integration_build'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/qc/integration_metrics:integration_build'
  exit 0
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OBSM_EMBEDDINGS+x} ]; then
  ViashError '--obsm_embeddings' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OBS_BATCH_LABEL+x} ]; then
  ViashError '--obs_batch_label' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OBS_CELL_LABEL+x} ]; then
  ViashError '--obs_cell_label' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OBS_CLUSTER+x} ]; then
  ViashError '--obs_cluster' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_UNS_NEIGHBORS+x} ]; then
  ViashError '--uns_neighbors' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OBSP_NEIGHBOR_CONNECTIVITIES+x} ]; then
  ViashError '--obsp_neighbor_connectivities' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_MODALITY+x} ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z ${VIASH_PAR_BIO_CONSERVATION_METRICS+x} ]; then
  VIASH_PAR_BIO_CONSERVATION_METRICS="nmi;ari;asw_label"
fi
if [ -z ${VIASH_PAR_BATCH_CORRECTION_METRICS+x} ]; then
  VIASH_PAR_BATCH_CORRECTION_METRICS="asw_batch;pcr;graph_connectivity"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ] && [ ! -e "$VIASH_PAR_INPUT" ]; then
  ViashError "Input file '$VIASH_PAR_INPUT' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_BIO_CONSERVATION_METRICS" ]; then
  VIASH_PAR_BIO_CONSERVATION_METRICS_CHOICES=("nmi;ari;asw_label;isolated_label_f1;isolated_label_asw;clisi_graph")
  IFS=';'
  set -f
  for val in $VIASH_PAR_BIO_CONSERVATION_METRICS; do
    if ! [[ ";${VIASH_PAR_BIO_CONSERVATION_METRICS_CHOICES[*]};" =~ ";${val};" ]]; then
      ViashError '--bio_conservation_metrics' specified value of \'${val}\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
      exit 1
    fi
  done
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_BATCH_CORRECTION_METRICS" ]; then
  VIASH_PAR_BATCH_CORRECTION_METRICS_CHOICES=("asw_batch;pcr;graph_connectivity;ilisi_graph;kbet")
  IFS=';'
  set -f
  for val in $VIASH_PAR_BATCH_CORRECTION_METRICS; do
    if ! [[ ";${VIASH_PAR_BATCH_CORRECTION_METRICS_CHOICES[*]};" =~ ";${val};" ]]; then
      ViashError '--batch_correction_metrics' specified value of \'${val}\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
      exit 1
    fi
  done
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_OUTPUT_COMPRESSION" ]; then
  VIASH_PAR_OUTPUT_COMPRESSION_CHOICES=("gzip:lzf")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_OUTPUT_COMPRESSION_CHOICES[*]}:" =~ ":$VIASH_PAR_OUTPUT_COMPRESSION:" ]]; then
    ViashError '--output_compression' specified value of \'$VIASH_PAR_OUTPUT_COMPRESSION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi

# detect volumes from file arguments
VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_INPUT")" )
  VIASH_PAR_INPUT=$(ViashAutodetectMount "$VIASH_PAR_INPUT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")" )
  VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashAutodetectMount "$VIASH_META_TEMP_DIR")
fi

# get unique mounts
VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_EXTRA_MOUNTS[@]}"; do echo "$val"; done | sort -u))

# change file ownership
function ViashPerformChown {
  if (( ${#VIASH_CHOWN_VARS[@]} )); then
    set +e
    eval docker run --entrypoint=chown -i --rm ${VIASH_UNIQUE_MOUNTS[@]} ghcr.io/openpipelines-bio/qc/integration_metrics:integration_build "$(id -u):$(id -g)" --silent --recursive ${VIASH_CHOWN_VARS[@]}
    set -e
  fi
}
trap ViashPerformChown EXIT

# helper function for filling in extra docker args
VIASH_EXTRA_DOCKER_ARGS=""
if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
fi
if [ ! -z "$VIASH_META_CPUS" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_CPUS}"
fi


# set dependency paths


ViashDebug "Running command: $(echo docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/qc/integration_metrics:integration_build)"
cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/qc/integration_metrics:integration_build
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-integration_metrics-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import scib
import mudata as mu
import numpy as np
import warnings

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "r'${VIASH_PAR_INPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "r'${VIASH_PAR_MODALITY//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'bio_conservation_metrics': $( if [ ! -z ${VIASH_PAR_BIO_CONSERVATION_METRICS+x} ]; then echo "r'${VIASH_PAR_BIO_CONSERVATION_METRICS//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'batch_correction_metrics': $( if [ ! -z ${VIASH_PAR_BATCH_CORRECTION_METRICS+x} ]; then echo "r'${VIASH_PAR_BATCH_CORRECTION_METRICS//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'obsm_embeddings': $( if [ ! -z ${VIASH_PAR_OBSM_EMBEDDINGS+x} ]; then echo "r'${VIASH_PAR_OBSM_EMBEDDINGS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_batch_label': $( if [ ! -z ${VIASH_PAR_OBS_BATCH_LABEL+x} ]; then echo "r'${VIASH_PAR_OBS_BATCH_LABEL//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_cell_label': $( if [ ! -z ${VIASH_PAR_OBS_CELL_LABEL+x} ]; then echo "r'${VIASH_PAR_OBS_CELL_LABEL//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_cluster': $( if [ ! -z ${VIASH_PAR_OBS_CLUSTER+x} ]; then echo "r'${VIASH_PAR_OBS_CLUSTER//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'uns_neighbors': $( if [ ! -z ${VIASH_PAR_UNS_NEIGHBORS+x} ]; then echo "r'${VIASH_PAR_UNS_NEIGHBORS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obsp_neighbor_connectivities': $( if [ ! -z ${VIASH_PAR_OBSP_NEIGHBOR_CONNECTIVITIES+x} ]; then echo "r'${VIASH_PAR_OBSP_NEIGHBOR_CONNECTIVITIES//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_compression': $( if [ ! -z ${VIASH_PAR_OUTPUT_COMPRESSION+x} ]; then echo "r'${VIASH_PAR_OUTPUT_COMPRESSION//\'/\'\"\'\"r\'}'"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

## VIASH END

# START TEMPORARY WORKAROUND setup_logger
# reason: resources aren't available when using Nextflow fusion
# from setup_logger import setup_logger
def setup_logger():
    import logging
    from sys import stdout

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    console_handler = logging.StreamHandler(stdout)
    logFormatter = logging.Formatter("%(asctime)s %(levelname)-8s %(message)s")
    console_handler.setFormatter(logFormatter)
    logger.addHandler(console_handler)

    return logger
# END TEMPORARY WORKAROUND setup_logger
logger = setup_logger()

warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=FutureWarning)

logger.info("Reading in data")
# Read in data
mdata = mu.read(par["input"])
input_adata = mdata.mod[par["modality"]]
adata = input_adata.copy()

# Remove nan values to calculate scores
if adata.obs["cell_type"].isna().any():
    logger.warning("Cell label obs column contains nan values: removing rows with nan value")
    adata_t = adata[~adata.obs["cell_type"].isna()].copy()
else:
    adata_t = adata.copy()

# Ensure all batch labels are str
adata.obs[par["obs_batch_label"]] = adata.obs[par["obs_batch_label"]].astype(str)

# rename neighbors and connectivities names if necessary
if par["uns_neighbors"] != "neighbors":
    adata_t.uns["neighbors"] = adata_t.uns[par["uns_neighbors"]]
if par["obsp_neighbor_connectivities"] != "connectivities":
    adata_t.obsp["connectivities"] = adata_t.obsp[par["obsp_neighbor_connectivities"]]

# Asses metrics to be calculated
assert len(par["bio_conservation_metrics"]) > 0, "Provide at least one metric for bio conservation."
assert len(par["batch_correction_metrics"]) > 0, "Provide at least one metric for bio conservation."

bio_metric_calc = {
    "nmi": False,
    "ari": False,
    "asw_label": False,
    "isolated_label_f1": False,
    "isolated_label_asw": False,
    "clisi_graph": False,
}

batch_metric_calc = {
    "asw_batch": False,
    "pcr": False,
    "graph_connectivity": False,
    "ilisi_graph": False,
    "kbet": False
}

for bio_metric in par["bio_conservation_metrics"]:
    bio_metric_calc[bio_metric] = True
for batch_metric in par["batch_correction_metrics"]:
    batch_metric_calc[batch_metric] = True

# Batch correction metrics
logger.info(f">> Batch Correction Metrics: {par['batch_correction_metrics']}")
# Dictionary with results of calculated metrics
batch_metrics = {}

# batch_metrics = {}
if batch_metric_calc["asw_batch"]:
    logger.info("Calculating ASW score (batches)")
    asw_batch = scib.metrics.silhouette_batch(
        adata_t,
        batch_key=par["obs_batch_label"],
        label_key=par["obs_cell_label"],
        embed=par["obsm_embeddings"],
        metric="euclidean",
        return_all=False,
        verbose=False,
        )
    batch_metrics["asw_batch"] = asw_batch
else:
    logger.info("Skipping ASW score (batches) calculation")
    batch_metrics["asw_batch"] = np.nan
    
if batch_metric_calc["pcr"]:
    logger.info("Calculating PC regression")
    pcr_score = scib.metrics.pcr_comparison(
        adata_t,
        adata_t,
        embed=par["obsm_embeddings"],
        covariate=par["obs_batch_label"],
        verbose=False
        )
    batch_metrics["pcr"] = pcr_score
else:
    logger.info("Skipping PC Regression calculation")
    batch_metrics["pcr"] = np.nan

if batch_metric_calc["graph_connectivity"]:
    logger.info("Calculating graph connectivity")
    graph_conn_score = scib.metrics.graph_connectivity(
        adata_t,
        label_key=par["obs_cell_label"]
        )
    batch_metrics["graph_connectivity"] = graph_conn_score
else:
    logger.info("Skipping graph connectivity calculation")
    batch_metrics["graph_connectivity"] = np.nan

if batch_metric_calc["ilisi_graph"]:
    logger.info("Calculating graph iLISI")
    graph_ilisi = scib.metrics.lisi.ilisi_graph(
        adata_t,
        batch_key=par["obs_batch_label"],
        type_="knn",
        use_rep=par["obsm_embeddings"]
        )
    batch_metrics["ilisi_graph"] = graph_ilisi
else:
    logger.info("Skipping graph iLISI calculation")
    batch_metrics["ilisi_graph"] = np.nan
    
if batch_metric_calc["kbet"]:
    logger.info("Calculating kBET")
    kbet_score = scib.metrics.kBET(
        adata_t,
        batch_key=par["obs_batch_label"],
        label_key=par["obs_cell_label"],
        type_="knn",
        embed=par["obsm_embeddings"],
        verbose=True
        )
    batch_metrics["kbet"] = kbet_score
else:
    logger.info("Skipping kBET calculation")
    batch_metrics["kbet"] = np.nan
    
# Bio conservation metrics
logger.info(f">>Bio Conservation Metrics: {par['bio_conservation_metrics']}")

# Dictionary to store results of bio conservation metrics 
bio_metrics = {}

if bio_metric_calc["nmi"]:
    logger.info("Calculating NMI score")
    nmi_score = scib.metrics.nmi(
            adata_t,
            cluster_key=par["obs_cluster"],
            label_key=par["obs_cell_label"]
        )
    bio_metrics["nmi"] = nmi_score
else:
    logger.info("Skipping NMI calculation")
    bio_metrics["nmi"] = np.nan
    
if bio_metric_calc["ari"]:
    logger.info("Calculating ARI score")
    ari_score = scib.metrics.ari(
        adata_t,
        cluster_key=par["obs_cluster"],
        label_key=par["obs_cell_label"]
        )
    bio_metrics["ari"] = ari_score
else:
    logger.info("Skipping ARI calculation")
    bio_metrics["ari"] = np.nan
    
if bio_metric_calc["asw_label"]:
    logger.info("Calculating ASW score (cell types)")
    asw_label = scib.metrics.silhouette(
        adata_t,
        label_key=par["obs_cell_label"],
        embed=par["obsm_embeddings"]
        )
    bio_metrics["asw_label"] = asw_label
else:
    logger.info("Skipping ASW score (cell types) calculation")
    bio_metrics["asw_label"] = np.nan
    
if bio_metric_calc["isolated_label_f1"]:
    logger.info("Calculating isolated label F1")
    il_score_f1 = scib.metrics.isolated_labels(
        adata_t,
        label_key=par["obs_cell_label"],
        batch_key=par["obs_batch_label"],
        embed=par["obsm_embeddings"],
        cluster=True
        )
    bio_metrics["isolated_label_f1"] = il_score_f1
else:
    logger.info("Skipping isolated label F1 calculation")
    bio_metrics["isolated_label_f1"] = np.nan

if bio_metric_calc["isolated_label_asw"]:
    logger.info("Calculating isolated label silhouette")
    il_score_asw = scib.metrics.isolated_labels(
        adata_t,
        label_key=par["obs_cell_label"],
        batch_key=par["obs_batch_label"],
        embed=par["obsm_embeddings"],
        cluster=False
        )
    bio_metrics["isolated_label_asw"] = il_score_asw
else:
    logger.info("Skipping isolated label ASW calculation")
    bio_metrics["isolated_label_asw"] = np.nan

if bio_metric_calc["clisi_graph"]:
    logger.info("Calculating graph cLISI")
    graph_clisi = scib.metrics.clisi_graph(
        adata_t,
        label_key=par["obs_cell_label"],
        type_="knn",
        use_rep=par["obsm_embeddings"]
    )
    bio_metrics["clisi_graph"] = graph_clisi
else:
    logger.info("Skipping isolated graph cLISI calculation")
    bio_metrics["clisi_graph"] = np.nan
    
logger.info(">> Aggregate Metrics")
logger.info(f"Calculating Bio Conservation Score based on {par['bio_conservation_metrics']} ")
# Calculate the mean of the bio conservation metrics ignoring the nan values
avg_bio = np.nanmean(list(bio_metrics.values()))

logger.info(f"Calculating Batch Correction Score based on {par['batch_correction_metrics']}")
# Calculate the mean of the bio conservation metrics ignoring the nan values
avg_batch = np.nanmean(list(batch_metrics.values()))

logger.info("Calculating Overall Score")
# Weighted mean of the bio conservation and batch correction scores 
# See https://doi.org/10.1038/s41592-021-01336-8
overall_score = (0.4 * avg_batch) + (0.6 * avg_bio)


logger.info("Writing output data")
adata.uns["bio_conservation_metrics"] = bio_metrics
adata.uns["batch_correction_metrics"] = batch_metrics
adata.uns["bio_conservation_score"] = avg_bio
adata.uns["batch_correction_score"] = avg_batch
adata.uns["overall_integration_score"] = overall_score

mdata.mod[par["modality"]] = adata
mdata.write(par["output"], compression=par["output_compression"])
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# strip viash automount from file paths
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  VIASH_PAR_INPUT=$(ViashStripAutomount "$VIASH_PAR_INPUT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT=$(ViashStripAutomount "$VIASH_PAR_OUTPUT")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_META_RESOURCES_DIR=$(ViashStripAutomount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_META_EXECUTABLE=$(ViashStripAutomount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_META_CONFIG=$(ViashStripAutomount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_META_TEMP_DIR=$(ViashStripAutomount "$VIASH_META_TEMP_DIR")
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi


exit 0

{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "pca",
"description": "Computes PCA coordinates, loadings and variance decomposition. Uses the implementation of scikit-learn [Pedregosa11].\n",
"type": "object",
"definitions": {

    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. Input h5mu file",
                "help_text": "Type: `file`, required, example: `input.h5mu`. Input h5mu file"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default": "rna"
            }
    

        ,
                "layer": {
                "type":
                "string",
                "description": "Type: `string`. Use specified layer for expression values instead of the ",
                "help_text": "Type: `string`. Use specified layer for expression values instead of the .X object from the modality."
            
            }
    

        ,
                "var_input": {
                "type":
                "string",
                "description": "Type: `string`, example: `filter_with_hvg`. Column name in ",
                "help_text": "Type: `string`, example: `filter_with_hvg`. Column name in .var matrix that will be used to select which genes to run the PCA on."
            
            }
    

        ,
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file."
            ,
                "default": "$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "obsm_output": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_pca`. In which ",
                "help_text": "Type: `string`, default: `X_pca`. In which .obsm slot to store the resulting embedding."
            ,
                "default": "X_pca"
            }
    

        ,
                "varm_output": {
                "type":
                "string",
                "description": "Type: `string`, default: `pca_loadings`. In which ",
                "help_text": "Type: `string`, default: `pca_loadings`. In which .varm slot to store the resulting loadings matrix."
            ,
                "default": "pca_loadings"
            }
    

        ,
                "uns_output": {
                "type":
                "string",
                "description": "Type: `string`, default: `pca_variance`. In which ",
                "help_text": "Type: `string`, default: `pca_variance`. In which .uns slot to store the resulting variance objects."
            ,
                "default": "pca_variance"
            }
    

        ,
                "num_components": {
                "type":
                "integer",
                "description": "Type: `integer`, example: `25`. Number of principal components to compute",
                "help_text": "Type: `integer`, example: `25`. Number of principal components to compute. Defaults to 50, or 1 - minimum dimension size of selected representation."
            
            }
    

        ,
                "overwrite": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Allow overwriting ",
                "help_text": "Type: `boolean_true`, default: `false`. Allow overwriting .obsm, .varm and .uns slots."
            ,
                "default": "False"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        ,
                "param_list": {
                "type":
                "string",
                "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
                "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",
                "hidden": true
            
            }
    

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

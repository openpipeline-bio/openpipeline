{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "cellxgene_census",
"description": "Query CellxGene Census or user-specified TileDBSoma object, and eventually fetch cell and gene metadata or/and expression counts.",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "Arguments related to the input (aka query) dataset.",
    "properties": {
    
        
                "input_database": {
                "type":
                "string",
                "description": "Type: `string`, default: `CellxGene`, example: `s3://`. Full input database S3 prefix URL",
                "help_text": "Type: `string`, default: `CellxGene`, example: `s3://`. Full input database S3 prefix URL. Default: CellxGene Census"
            ,
                "default": "CellxGene"
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. Which modality to store the output in",
                "help_text": "Type: `string`, default: `rna`. Which modality to store the output in."
            ,
                "default": "rna"
            }
    

        ,
                "cellxgene_release": {
                "type":
                "string",
                "description": "Type: `string`, default: `2023-05-15`. CellxGene Census release date",
                "help_text": "Type: `string`, default: `2023-05-15`. CellxGene Census release date. More information: https://chanzuckerberg.github.io/cellxgene-census/cellxgene_census_docsite_data_release_info.html"
            ,
                "default": "2023-05-15"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "Output arguments.",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file."
            ,
                "default": "$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. ",
                "enum": ["gzip", "lzf"]
            
            
            }
    

}
},
    
    
    "query" : {
    "title": "Query",
    "type": "object",
    "description": "Arguments related to the query.",
    "properties": {
    
        
                "species": {
                "type":
                "string",
                "description": "Type: `string`, default: `homo_sapiens`, example: `homo_sapiens`, choices: ``homo_sapiens`, `mus_musculus``. Specie(s) of interest",
                "help_text": "Type: `string`, default: `homo_sapiens`, example: `homo_sapiens`, choices: ``homo_sapiens`, `mus_musculus``. Specie(s) of interest. If not specified, Homo Sapiens will be queried.",
                "enum": ["homo_sapiens", "mus_musculus"]
            
            ,
                "default": "homo_sapiens"
            }
    

        ,
                "cell_query": {
                "type":
                "string",
                "description": "Type: `string`, example: `is_primary_data == True and cell_type_ontology_term_id in [\u0027CL:0000136\u0027, \u0027CL:1000311\u0027, \u0027CL:0002616\u0027] and suspension_type == \u0027cell\u0027`. The query for selecting the cells as defined by the cellxgene census schema",
                "help_text": "Type: `string`, example: `is_primary_data == True and cell_type_ontology_term_id in [\u0027CL:0000136\u0027, \u0027CL:1000311\u0027, \u0027CL:0002616\u0027] and suspension_type == \u0027cell\u0027`. The query for selecting the cells as defined by the cellxgene census schema."
            
            }
    

        ,
                "cells_filter_columns": {
                "type":
                "string",
                "description": "Type: List of `string`, example: `dataset_id:tissue:assay:disease:cell_type`, multiple_sep: `\":\"`. The query for selecting the cells as defined by the cellxgene census schema",
                "help_text": "Type: List of `string`, example: `dataset_id:tissue:assay:disease:cell_type`, multiple_sep: `\":\"`. The query for selecting the cells as defined by the cellxgene census schema."
            
            }
    

        ,
                "min_cells_filter_columns": {
                "type":
                "number",
                "description": "Type: `double`, example: `100`. Minimum of amount of summed cells_filter_columns cells",
                "help_text": "Type: `double`, example: `100`. Minimum of amount of summed cells_filter_columns cells"
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/query"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "harmonypy",
    "description": "Performs Harmony integration based as described in https://github.com/immunogenomics/harmony. Based on an implementation in python from https://github.com/slowkow/harmonypy",
    "type": "object",
    "definitions": {
      "arguments" : {
        "title": "Arguments",
        "type": "object",
        "description": "No description",
        "properties": {
          
          "input": {
            "type": "string",
            "description": "Type: `file`, required. Input h5mu file",
            "help_text": "Type: `file`, required. Input h5mu file"
          },
          
          "output": {
            "type": "string",
            "description": "Type: `file`, required, default: `$id.$key.output.output`. Output h5mu file",
            "help_text": "Type: `file`, required, default: `$id.$key.output.output`. Output h5mu file.",
            "default": "$id.$key.output.output"
          },
          
          "output_compression": {
            "type": "string",
            "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
            "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
            "enum": ["gzip", "lzf"]
            
          },
          
          "modality": {
            "type": "string",
            "description": "Type: `string`, default: `rna`. ",
            "help_text": "Type: `string`, default: `rna`. ",
            "default": "rna"
          },
          
          "obsm_input": {
            "type": "string",
            "description": "Type: `string`, default: `X_pca`. Which ",
            "help_text": "Type: `string`, default: `X_pca`. Which .obsm slot to use as a starting PCA embedding.",
            "default": "X_pca"
          },
          
          "obsm_output": {
            "type": "string",
            "description": "Type: `string`, default: `X_pca_integrated`. In which ",
            "help_text": "Type: `string`, default: `X_pca_integrated`. In which .obsm slot to store the resulting integrated embedding.",
            "default": "X_pca_integrated"
          },
          
          "theta": {
            "type": "string",
            "description": "Type: List of `double`, default: `2`, multiple_sep: `\":\"`. Diversity clustering penalty parameter",
            "help_text": "Type: List of `double`, default: `2`, multiple_sep: `\":\"`. Diversity clustering penalty parameter. Specify for each variable in group.by.vars. theta=0 does not encourage any diversity. Larger values of theta result in more diverse clusters.",
            "default": "2"
          },
          
          "obs_covariates": {
            "type": "string",
            "description": "Type: List of `string`, required, example: `batch:sample`, multiple_sep: `\":\"`. The ",
            "help_text": "Type: List of `string`, required, example: `batch:sample`, multiple_sep: `\":\"`. The .obs field(s) that define the covariate(s) to regress out."
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          
          "publish_dir": {
            "type": "string",
            "description": "Type: `string`, required, example: `output/`. Path to an output directory",
            "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
          },
          
          "param_list": {
            "type": "string",
            "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
            "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",            
            "hidden": true
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}

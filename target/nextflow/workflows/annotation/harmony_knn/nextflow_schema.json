{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "harmony_knn",
"description": "Pipeline for cell type annotation using leiden integration of reference and query dataset followed by KNN label transfer.",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "id": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `foo`. ID of the sample",
                "help_text": "Type: `string`, required, example: `foo`. ID of the sample."
            
            }
    

        ,
                "input_query_dataset": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. Input dataset consisting of the (unlabeled) query observations",
                "help_text": "Type: `file`, required, example: `input.h5mu`. Input dataset consisting of the (unlabeled) query observations. The dataset is expected to be pre-processed in the same way as --input_reference_dataset."
            
            }
    

        ,
                "input_reference_dataset": {
                "type":
                "string",
                "description": "Type: `file`, required. Input dataset consisting of the (labeled) reference observations",
                "help_text": "Type: `file`, required. Input dataset consisting of the (labeled) reference observations. The dataset is expected to be pre-processed in the same way as --input_query_dataset."
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. Which modality to process",
                "help_text": "Type: `string`, default: `rna`. Which modality to process."
            ,
                "default": "rna"
            }
    

        ,
                "embedding": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_pca`. Embedding to use as input",
                "help_text": "Type: `string`, default: `X_pca`. Embedding to use as input"
            ,
                "default": "X_pca"
            }
    

        ,
                "obs_reference_targets": {
                "type":
                "string",
                "description": "Type: List of `string`, required, example: `ann_level_1:ann_level_2:ann_level_3:ann_level_4:ann_level_5:ann_finest_level`, multiple_sep: `\":\"`. The `",
                "help_text": "Type: List of `string`, required, example: `ann_level_1:ann_level_2:ann_level_3:ann_level_4:ann_level_5:ann_finest_level`, multiple_sep: `\":\"`. The `.obs` key(s) of the target labels to tranfer."
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Destination path to the output",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Destination path to the output."
            ,
                "default": "$id.$key.output.h5mu"
            }
    

        ,
                "output_obs_predictions": {
                "type":
                "string",
                "description": "Type: List of `string`, multiple_sep: `\":\"`. In which `",
                "help_text": "Type: List of `string`, multiple_sep: `\":\"`. In which `.obs` slots to store the predicted information.\nIf provided, must have the same length as `--reference_obs_targets`.\nIf empty, will default to the `reference_obs_targets` combined with the `\"_pred\"` suffix.\n"
            
            }
    

        ,
                "output_obs_probability": {
                "type":
                "string",
                "description": "Type: List of `string`, multiple_sep: `\":\"`. In which `",
                "help_text": "Type: List of `string`, multiple_sep: `\":\"`. In which `.obs` slots to store the probability of the predictions.\nIf provided, must have the same length as `--reference_obs_targets`.\nIf empty, will default to the `reference_obs_targets` combined with the `\"_probability\"` suffix.\n"
            
            }
    

        ,
                "output_uns_parameters": {
                "type":
                "string",
                "description": "Type: `string`, default: `labels_transfer`. The `",
                "help_text": "Type: `string`, default: `labels_transfer`. The `.uns` key to store additional information about the parameters used for the label transfer.\n"
            ,
                "default": "labels_transfer"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.\n",
                "enum": ["gzip", "lzf"]
            
            
            }
    

}
},
    
    
    "harmony integration options" : {
    "title": "Harmony integration options",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "theta": {
                "type":
                "string",
                "description": "Type: List of `double`, default: `2`, multiple_sep: `\":\"`. Diversity clustering penalty parameter",
                "help_text": "Type: List of `double`, default: `2`, multiple_sep: `\":\"`. Diversity clustering penalty parameter. Specify for each variable in group.by.vars. \ntheta=0 does not encourage any diversity. Larger values of theta\nresult in more diverse clusters.\"\n"
            ,
                "default": "2"
            }
    

        ,
                "obs_covariates": {
                "type":
                "string",
                "description": "Type: List of `string`, required, example: `batch:sample`, multiple_sep: `\":\"`. The ",
                "help_text": "Type: List of `string`, required, example: `batch:sample`, multiple_sep: `\":\"`. The .obs field(s) that define the covariate(s) to regress out."
            
            }
    

        ,
                "obsm_integrated": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_integrated_harmony`. In which ",
                "help_text": "Type: `string`, default: `X_integrated_harmony`. In which .obsm slot to store the resulting integrated embedding."
            ,
                "default": "X_integrated_harmony"
            }
    

}
},
    
    
    "neighbor classifier arguments" : {
    "title": "Neighbor classifier arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "weights": {
                "type":
                "string",
                "description": "Type: `string`, default: `uniform`, choices: ``uniform`, `distance``. Weight function used in prediction",
                "help_text": "Type: `string`, default: `uniform`, choices: ``uniform`, `distance``. Weight function used in prediction. Possible values are:\n`uniform` (all points in each neighborhood are weighted equally) or \n`distance` (weight points by the inverse of their distance)\n",
                "enum": ["uniform", "distance"]
            
            ,
                "default": "uniform"
            }
    

        ,
                "n_neighbors": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `15`. The number of neighbors to use in k-neighbor graph structure used for fast approximate nearest neighbor search with PyNNDescent",
                "help_text": "Type: `integer`, default: `15`. The number of neighbors to use in k-neighbor graph structure used for fast approximate nearest neighbor search with PyNNDescent. \nLarger values will result in more accurate search results at the cost of computation time.\n"
            ,
                "default": "15"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/harmony integration options"
    },

    {
    "$ref": "#/definitions/neighbor classifier arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

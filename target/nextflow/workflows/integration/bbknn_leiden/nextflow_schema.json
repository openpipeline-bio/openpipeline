{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "bbknn_leiden",
"description": "Run bbknn followed by leiden clustering and run umap on the result.",
"type": "object",
"definitions": {

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "id": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `foo`. ID of the sample",
                "help_text": "Type: `string`, required, example: `foo`. ID of the sample."
            
            }
    

        ,
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `dataset.h5mu`. Path to the sample",
                "help_text": "Type: `file`, required, example: `dataset.h5mu`. Path to the sample."
            
            }
    

        ,
                "layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `log_normalized`. use specified layer for expression values instead of the ",
                "help_text": "Type: `string`, default: `log_normalized`. use specified layer for expression values instead of the .X object from the modality."
            ,
                "default": "log_normalized"
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. Which modality to process",
                "help_text": "Type: `string`, default: `rna`. Which modality to process."
            ,
                "default": "rna"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Destination path to the output",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Destination path to the output."
            ,
                "default": "$id.$key.output.h5mu"
            }
    

}
},
    
    
    "bbknn" : {
    "title": "Bbknn",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "obsm_input": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_pca`. The dimensionality reduction in `",
                "help_text": "Type: `string`, default: `X_pca`. The dimensionality reduction in `.obsm` to use for neighbour detection. Defaults to X_pca."
            ,
                "default": "X_pca"
            }
    

        ,
                "obs_batch": {
                "type":
                "string",
                "description": "Type: `string`, default: `sample_id`. ",
                "help_text": "Type: `string`, default: `sample_id`. .obs column name discriminating between your batches."
            ,
                "default": "sample_id"
            }
    

        ,
                "uns_output": {
                "type":
                "string",
                "description": "Type: `string`, default: `bbknn_integration_neighbors`. Mandatory ",
                "help_text": "Type: `string`, default: `bbknn_integration_neighbors`. Mandatory .uns slot to store various neighbor output objects."
            ,
                "default": "bbknn_integration_neighbors"
            }
    

        ,
                "obsp_distances": {
                "type":
                "string",
                "description": "Type: `string`, default: `bbknn_integration_distances`. In which ",
                "help_text": "Type: `string`, default: `bbknn_integration_distances`. In which .obsp slot to store the distance matrix between the resulting neighbors."
            ,
                "default": "bbknn_integration_distances"
            }
    

        ,
                "obsp_connectivities": {
                "type":
                "string",
                "description": "Type: `string`, default: `bbknn_integration_connectivities`. In which ",
                "help_text": "Type: `string`, default: `bbknn_integration_connectivities`. In which .obsp slot to store the connectivities matrix between the resulting neighbors."
            ,
                "default": "bbknn_integration_connectivities"
            }
    

        ,
                "n_neighbors_within_batch": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `3`. How many top neighbours to report for each batch; total number of neighbours in the initial k-nearest-neighbours computation will be this number times the number of batches",
                "help_text": "Type: `integer`, default: `3`. How many top neighbours to report for each batch; total number of neighbours in the initial k-nearest-neighbours computation will be this number times the number of batches."
            ,
                "default": "3"
            }
    

        ,
                "n_pcs": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `50`. How many dimensions (in case of PCA, principal components) to use in the analysis",
                "help_text": "Type: `integer`, default: `50`. How many dimensions (in case of PCA, principal components) to use in the analysis."
            ,
                "default": "50"
            }
    

        ,
                "n_trim": {
                "type":
                "integer",
                "description": "Type: `integer`. Trim the neighbours of each cell to these many top connectivities",
                "help_text": "Type: `integer`. Trim the neighbours of each cell to these many top connectivities. May help with population independence and improve the tidiness of clustering. The lower the value the more independent the individual populations, at the cost of more conserved batch effect. If `None` (default), sets the parameter value automatically to 10 times `neighbors_within_batch` times the number of batches. Set to 0 to skip."
            
            }
    

}
},
    
    
    "clustering options" : {
    "title": "Clustering options",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "obs_cluster": {
                "type":
                "string",
                "description": "Type: `string`, default: `bbknn_integration_leiden`. Prefix for the ",
                "help_text": "Type: `string`, default: `bbknn_integration_leiden`. Prefix for the .obs keys under which to add the cluster labels. Newly created columns in .obs will \nbe created from the specified value for \u0027--obs_cluster\u0027 suffixed with an underscore and one of the resolutions\nresolutions specified in \u0027--leiden_resolution\u0027.          \n"
            ,
                "default": "bbknn_integration_leiden"
            }
    

        ,
                "leiden_resolution": {
                "type":
                "string",
                "description": "Type: List of `double`, default: `1`, multiple_sep: `\":\"`. Control the coarseness of the clustering",
                "help_text": "Type: List of `double`, default: `1`, multiple_sep: `\":\"`. Control the coarseness of the clustering. Higher values lead to more clusters."
            ,
                "default": "1"
            }
    

}
},
    
    
    "umap options" : {
    "title": "UMAP options",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "obsm_umap": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_leiden_bbknn_umap`. In which ",
                "help_text": "Type: `string`, default: `X_leiden_bbknn_umap`. In which .obsm slot to store the resulting UMAP embedding."
            ,
                "default": "X_leiden_bbknn_umap"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        ,
                "param_list": {
                "type":
                "string",
                "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
                "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",
                "hidden": true
            
            }
    

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/bbknn"
    },

    {
    "$ref": "#/definitions/clustering options"
    },

    {
    "$ref": "#/definitions/umap options"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "scvi_leiden",
"description": "Run scvi integration followed by neighbour calculations, leiden clustering and run umap on the result.",
"type": "object",
"definitions": {

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "id": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `foo`. ID of the sample",
                "help_text": "Type: `string`, required, example: `foo`. ID of the sample."
            
            }
    

        ,
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `dataset.h5mu`. Path to the sample",
                "help_text": "Type: `file`, required, example: `dataset.h5mu`. Path to the sample."
            
            }
    

        ,
                "layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `log_normalized`. use specified layer for expression values instead of the ",
                "help_text": "Type: `string`, default: `log_normalized`. use specified layer for expression values instead of the .X object from the modality."
            ,
                "default": "log_normalized"
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. Which modality to process",
                "help_text": "Type: `string`, default: `rna`. Which modality to process."
            ,
                "default": "rna"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Destination path to the output",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Destination path to the output."
            ,
                "default": "$id.$key.output.h5mu"
            }
    

        ,
                "output_model": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_model.output_model`, example: `output_dir/`. Folder where the state of the trained model will be saved to",
                "help_text": "Type: `file`, required, default: `$id.$key.output_model.output_model`, example: `output_dir/`. Folder where the state of the trained model will be saved to."
            ,
                "default": "$id.$key.output_model.output_model"
            }
    

}
},
    
    
    "neighbour calculation" : {
    "title": "Neighbour calculation",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "uns_neighbors": {
                "type":
                "string",
                "description": "Type: `string`, default: `scvi_integration_neighbors`. In which ",
                "help_text": "Type: `string`, default: `scvi_integration_neighbors`. In which .uns slot to store various neighbor output objects."
            ,
                "default": "scvi_integration_neighbors"
            }
    

        ,
                "obsp_neighbor_distances": {
                "type":
                "string",
                "description": "Type: `string`, default: `scvi_integration_distances`. In which ",
                "help_text": "Type: `string`, default: `scvi_integration_distances`. In which .obsp slot to store the distance matrix between the resulting neighbors."
            ,
                "default": "scvi_integration_distances"
            }
    

        ,
                "obsp_neighbor_connectivities": {
                "type":
                "string",
                "description": "Type: `string`, default: `scvi_integration_connectivities`. In which ",
                "help_text": "Type: `string`, default: `scvi_integration_connectivities`. In which .obsp slot to store the connectivities matrix between the resulting neighbors."
            ,
                "default": "scvi_integration_connectivities"
            }
    

}
},
    
    
    "scvi integration options" : {
    "title": "Scvi integration options",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "obs_batch": {
                "type":
                "string",
                "description": "Type: `string`, required. Column name discriminating between your batches",
                "help_text": "Type: `string`, required. Column name discriminating between your batches."
            
            }
    

        ,
                "obsm_output": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_scvi_integrated`. In which ",
                "help_text": "Type: `string`, default: `X_scvi_integrated`. In which .obsm slot to store the resulting integrated embedding."
            ,
                "default": "X_scvi_integrated"
            }
    

        ,
                "var_input": {
                "type":
                "string",
                "description": "Type: `string`. ",
                "help_text": "Type: `string`. .var column containing highly variable genes. By default, do not subset genes."
            
            }
    

        ,
                "early_stopping": {
                "type":
                "boolean",
                "description": "Type: `boolean`. Whether to perform early stopping with respect to the validation set",
                "help_text": "Type: `boolean`. Whether to perform early stopping with respect to the validation set."
            
            }
    

        ,
                "early_stopping_monitor": {
                "type":
                "string",
                "description": "Type: `string`, default: `elbo_validation`, choices: ``elbo_validation`, `reconstruction_loss_validation`, `kl_local_validation``. Metric logged during validation set epoch",
                "help_text": "Type: `string`, default: `elbo_validation`, choices: ``elbo_validation`, `reconstruction_loss_validation`, `kl_local_validation``. Metric logged during validation set epoch.",
                "enum": ["elbo_validation", "reconstruction_loss_validation", "kl_local_validation"]
            
            ,
                "default": "elbo_validation"
            }
    

        ,
                "early_stopping_patience": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `45`. Number of validation epochs with no improvement after which training will be stopped",
                "help_text": "Type: `integer`, default: `45`. Number of validation epochs with no improvement after which training will be stopped."
            ,
                "default": "45"
            }
    

        ,
                "early_stopping_min_delta": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.0`. Minimum change in the monitored quantity to qualify as an improvement, i",
                "help_text": "Type: `double`, default: `0.0`. Minimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement."
            ,
                "default": "0.0"
            }
    

        ,
                "max_epochs": {
                "type":
                "integer",
                "description": "Type: `integer`. Number of passes through the dataset, defaults to (20000 / number of cells) * 400 or 400; whichever is smallest",
                "help_text": "Type: `integer`. Number of passes through the dataset, defaults to (20000 / number of cells) * 400 or 400; whichever is smallest."
            
            }
    

        ,
                "reduce_lr_on_plateau": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether to monitor validation loss and reduce learning rate when validation set `lr_scheduler_metric` plateaus",
                "help_text": "Type: `boolean`, default: `true`. Whether to monitor validation loss and reduce learning rate when validation set `lr_scheduler_metric` plateaus."
            ,
                "default": "True"
            }
    

        ,
                "lr_factor": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.6`. Factor to reduce learning rate",
                "help_text": "Type: `double`, default: `0.6`. Factor to reduce learning rate."
            ,
                "default": "0.6"
            }
    

        ,
                "lr_patience": {
                "type":
                "number",
                "description": "Type: `double`, default: `30`. Number of epochs with no improvement after which learning rate will be reduced",
                "help_text": "Type: `double`, default: `30`. Number of epochs with no improvement after which learning rate will be reduced."
            ,
                "default": "30"
            }
    

}
},
    
    
    "clustering options" : {
    "title": "Clustering options",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "obs_cluster": {
                "type":
                "string",
                "description": "Type: `string`, default: `scvi_integration_leiden`. Prefix for the ",
                "help_text": "Type: `string`, default: `scvi_integration_leiden`. Prefix for the .obs keys under which to add the cluster labels. Newly created columns in .obs will \nbe created from the specified value for \u0027--obs_cluster\u0027 suffixed with an underscore and one of the resolutions\nresolutions specified in \u0027--leiden_resolution\u0027.\n"
            ,
                "default": "scvi_integration_leiden"
            }
    

        ,
                "leiden_resolution": {
                "type":
                "string",
                "description": "Type: List of `double`, default: `1`, multiple_sep: `\":\"`. Control the coarseness of the clustering",
                "help_text": "Type: List of `double`, default: `1`, multiple_sep: `\":\"`. Control the coarseness of the clustering. Higher values lead to more clusters."
            ,
                "default": "1"
            }
    

}
},
    
    
    "umap options" : {
    "title": "Umap options",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "obsm_umap": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_scvi_umap`. In which ",
                "help_text": "Type: `string`, default: `X_scvi_umap`. In which .obsm slot to store the resulting UMAP embedding."
            ,
                "default": "X_scvi_umap"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        ,
                "param_list": {
                "type":
                "string",
                "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
                "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",
                "hidden": true
            
            }
    

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/neighbour calculation"
    },

    {
    "$ref": "#/definitions/scvi integration options"
    },

    {
    "$ref": "#/definitions/clustering options"
    },

    {
    "$ref": "#/definitions/umap options"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

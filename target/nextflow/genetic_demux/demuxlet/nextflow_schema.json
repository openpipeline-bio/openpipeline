{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "demuxlet",
"description": "\"Demuxlet is a software tool to deconvolute sample identity and identify multiplets when multiple samples are pooled by barcoded single cell sequencing. |\nIf external genotyping data for each sample is available (e.g. from SNP arrays), demuxlet would be recommended. |\nBe careful that the parameters on the github is not in line with the newest help version. |\n",
"type": "object",
"definitions": {

    
    
    "input" : {
    "title": "Input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "sam": {
                "type":
                "string",
                "description": "Type: `file`. Input SAM/BAM/CRAM file",
                "help_text": "Type: `file`. Input SAM/BAM/CRAM file. Must be sorted by coordinates and indexed."
            
            }
    

        ,
                "tag_group": {
                "type":
                "string",
                "description": "Type: `string`, default: `CB`. Tag representing readgroup or cell barcodes, in the case to partition the BAM file into multiple groups",
                "help_text": "Type: `string`, default: `CB`. Tag representing readgroup or cell barcodes, in the case to partition the BAM file into multiple groups. For 10x genomics, use CB."
            ,
                "default": "CB"
            }
    

        ,
                "tag_umi": {
                "type":
                "string",
                "description": "Type: `string`, default: `UB`. Tag representing UMIs",
                "help_text": "Type: `string`, default: `UB`. Tag representing UMIs. For 10x genomiucs, use UB."
            ,
                "default": "UB"
            }
    

        ,
                "plp": {
                "type":
                "string",
                "description": "Type: `string`. Input pileup format",
                "help_text": "Type: `string`. Input pileup format. If the value is a string, it will be considered as the path of the plp file. If the value is boolean true, it will perform dscpileup."
            
            }
    

        ,
                "vcf": {
                "type":
                "string",
                "description": "Type: `file`. Input VCF/BCF file, containing the individual genotypes (GT), posterior probability (GP), or genotype likelihood (PL)",
                "help_text": "Type: `file`. Input VCF/BCF file, containing the individual genotypes (GT), posterior probability (GP), or genotype likelihood (PL)."
            
            }
    

        ,
                "field": {
                "type":
                "string",
                "description": "Type: `string`, default: `GT`. FORMAT field to extract the genotype, likelihood, or posterior from",
                "help_text": "Type: `string`, default: `GT`. FORMAT field to extract the genotype, likelihood, or posterior from"
            ,
                "default": "GT"
            }
    

        ,
                "geno_error_offset": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.1`. Offset of genotype error rate",
                "help_text": "Type: `double`, default: `0.1`. Offset of genotype error rate. [error] = [offset] + [1-offset]*[coeff]*[1-r2]"
            ,
                "default": "0.1"
            }
    

        ,
                "geno_error_coeff": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.0`. Slope of genotype error rate",
                "help_text": "Type: `double`, default: `0.0`. Slope of genotype error rate. [error] = [offset] + [1-offset]*[coeff]*[1-r2]"
            ,
                "default": "0.0"
            }
    

        ,
                "r2_info": {
                "type":
                "string",
                "description": "Type: `string`, default: `R2`. INFO field name representing R2 value",
                "help_text": "Type: `string`, default: `R2`. INFO field name representing R2 value. Used for representing imputation quality."
            ,
                "default": "R2"
            }
    

        ,
                "min_mac": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1`. Minimum minor allele frequency",
                "help_text": "Type: `integer`, default: `1`. Minimum minor allele frequency."
            ,
                "default": "1"
            }
    

        ,
                "min_call_rate": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.5`. Minimum call rate",
                "help_text": "Type: `double`, default: `0.5`. Minimum call rate."
            ,
                "default": "0.5"
            }
    

        ,
                "alpha": {
                "type":
                "string",
                "description": "Type: `string`, default: `0.5`. Grid of alpha to search for (default is 0",
                "help_text": "Type: `string`, default: `0.5`. Grid of alpha to search for (default is 0.1, 0.2, 0.3, 0.4, 0.5)"
            ,
                "default": "0.5"
            }
    

        ,
                "doublet_prior": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.5`. Prior of doublet",
                "help_text": "Type: `double`, default: `0.5`. Prior of doublet"
            ,
                "default": "0.5"
            }
    

        ,
                "sm": {
                "type":
                "string",
                "description": "Type: `string`. List of sample IDs to compare to (default: use all)",
                "help_text": "Type: `string`. List of sample IDs to compare to (default: use all)."
            
            }
    

        ,
                "sm_list": {
                "type":
                "string",
                "description": "Type: `string`. File containing the list of sample IDs to compare",
                "help_text": "Type: `string`. File containing the list of sample IDs to compare."
            
            }
    

        ,
                "sam_verbose": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1000000`. Verbose message frequency for SAM/BAM/CRAM",
                "help_text": "Type: `integer`, default: `1000000`. Verbose message frequency for SAM/BAM/CRAM."
            ,
                "default": "1000000"
            }
    

        ,
                "vcf_verbose": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1000`. Verbose message frequency for VCF/BCF",
                "help_text": "Type: `integer`, default: `1000`. Verbose message frequency for VCF/BCF."
            ,
                "default": "1000"
            }
    

        ,
                "cap_bq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `20`. Maximum base quality (higher BQ will be capped)",
                "help_text": "Type: `integer`, default: `20`. Maximum base quality (higher BQ will be capped)."
            ,
                "default": "20"
            }
    

        ,
                "min_bq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `13`. Minimum base quality to consider (lower BQ will be skipped)",
                "help_text": "Type: `integer`, default: `13`. Minimum base quality to consider (lower BQ will be skipped)."
            ,
                "default": "13"
            }
    

        ,
                "min_mq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `20`. Minimum mapping quality to consider (lower MQ will be ignored)",
                "help_text": "Type: `integer`, default: `20`. Minimum mapping quality to consider (lower MQ will be ignored)."
            ,
                "default": "20"
            }
    

        ,
                "min_td": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum distance to the tail (lower will be ignored)",
                "help_text": "Type: `integer`, default: `0`. Minimum distance to the tail (lower will be ignored)."
            ,
                "default": "0"
            }
    

        ,
                "excl_flag": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `3844`. SAM/BAM FLAGs to be excluded",
                "help_text": "Type: `integer`, default: `3844`. SAM/BAM FLAGs to be excluded."
            ,
                "default": "3844"
            }
    

        ,
                "group_list": {
                "type":
                "string",
                "description": "Type: `string`. List of tag readgroup/cell barcode to consider in this run",
                "help_text": "Type: `string`. List of tag readgroup/cell barcode to consider in this run. All other barcodes will be ignored. This is useful for parallelized run."
            
            }
    

        ,
                "min_total": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of total reads for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of total reads for a droplet/cell to be considered."
            ,
                "default": "0"
            }
    

        ,
                "min_snp": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of SNPs with coverage for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of SNPs with coverage for a droplet/cell to be considered."
            ,
                "default": "0"
            }
    

        ,
                "min_umi": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of UMIs for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of UMIs for a droplet/cell to be considered."
            ,
                "default": "0"
            }
    

}
},
    
    
    "output" : {
    "title": "Output",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output.output`, example: `demux/`. Output directory",
                "help_text": "Type: `file`, default: `$id.$key.output.output`, example: `demux/`. Output directory"
            ,
                "default": "$id.$key.output.output"
            }
    

        ,
                "out": {
                "type":
                "string",
                "description": "Type: `string`, example: `demuxlet`. demuxlet output file prefix",
                "help_text": "Type: `string`, example: `demuxlet`. demuxlet output file prefix"
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        ,
                "param_list": {
                "type":
                "string",
                "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
                "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",
                "hidden": true
            
            }
    

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/input"
    },

    {
    "$ref": "#/definitions/output"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

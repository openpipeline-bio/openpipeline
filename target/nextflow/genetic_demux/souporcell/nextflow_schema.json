{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "souporcell",
"description": "souporcell is a method for clustering mixed-genotype scRNAseq experiments by individual.",
"type": "object",
"definitions": {

    
    
    "input" : {
    "title": "Input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "fasta": {
                "type":
                "string",
                "description": "Type: `file`. reference fasta file",
                "help_text": "Type: `file`. reference fasta file"
            
            }
    

        ,
                "bam": {
                "type":
                "string",
                "description": "Type: `file`. cellranger bam",
                "help_text": "Type: `file`. cellranger bam"
            
            }
    

        ,
                "bam_index": {
                "type":
                "string",
                "description": "Type: `file`. cellranger bam index",
                "help_text": "Type: `file`. cellranger bam index"
            
            }
    

        ,
                "barcodes": {
                "type":
                "string",
                "description": "Type: `file`. barcodes",
                "help_text": "Type: `file`. barcodes.tsv from cellranger"
            
            }
    

        ,
                "clusters": {
                "type":
                "integer",
                "description": "Type: `integer`. number cluster, tbd add easy way to run on a range of k",
                "help_text": "Type: `integer`. number cluster, tbd add easy way to run on a range of k"
            
            }
    

        ,
                "ploidy": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `2`. ploidy, must be 1 or 2",
                "help_text": "Type: `integer`, default: `2`. ploidy, must be 1 or 2"
            ,
                "default": "2"
            }
    

        ,
                "min_alt": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `10`. min alt to use locus",
                "help_text": "Type: `integer`, default: `10`. min alt to use locus"
            ,
                "default": "10"
            }
    

        ,
                "min_ref": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `10`. min ref to use locus",
                "help_text": "Type: `integer`, default: `10`. min ref to use locus"
            ,
                "default": "10"
            }
    

        ,
                "max_loci": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `2048`. max loci per cell, affects speed",
                "help_text": "Type: `integer`, default: `2048`. max loci per cell, affects speed"
            ,
                "default": "2048"
            }
    

        ,
                "restarts": {
                "type":
                "integer",
                "description": "Type: `integer`. number of restarts in clustering, when there are \u003e 12 clusters we recommend increasing this to avoid local minima",
                "help_text": "Type: `integer`. number of restarts in clustering, when there are \u003e 12 clusters we recommend increasing this to avoid local minima"
            
            }
    

        ,
                "common_variants": {
                "type":
                "string",
                "description": "Type: `file`. common variant loci or known variant loci vcf, must be vs same reference fasta",
                "help_text": "Type: `file`. common variant loci or known variant loci vcf, must be vs same reference fasta"
            
            }
    

        ,
                "known_genotypes": {
                "type":
                "string",
                "description": "Type: `file`. known variants per clone in population vcf mode, must be ",
                "help_text": "Type: `file`. known variants per clone in population vcf mode, must be .vcf right now we dont accept gzip or bcf sorry"
            
            }
    

        ,
                "known_genotypes_sample_names": {
                "type":
                "string",
                "description": "Type: `string`. which samples in population vcf from known genotypes option represent the donors in your sample",
                "help_text": "Type: `string`. which samples in population vcf from known genotypes option represent the donors in your sample"
            
            }
    

        ,
                "skip_remap": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. dont remap with minimap2 (not recommended unless in conjunction with --common_variants",
                "help_text": "Type: `boolean_true`, default: `false`. dont remap with minimap2 (not recommended unless in conjunction with --common_variants"
            ,
                "default": "False"
            }
    

        ,
                "ignore": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. set to True to ignore data error assertions",
                "help_text": "Type: `boolean_true`, default: `false`. set to True to ignore data error assertions"
            ,
                "default": "False"
            }
    

}
},
    
    
    "output" : {
    "title": "Output",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output.output`, example: `souporcell_out`. name of directory to place souporcell files",
                "help_text": "Type: `file`, default: `$id.$key.output.output`, example: `souporcell_out`. name of directory to place souporcell files"
            ,
                "default": "$id.$key.output.output"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        ,
                "param_list": {
                "type":
                "string",
                "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
                "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",
                "hidden": true
            
            }
    

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/input"
    },

    {
    "$ref": "#/definitions/output"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "freemuxlet",
"description": "\"freemuxlet is a software tool to deconvolute sample identity and identify multiplets when multiple samples are pooled by barcoded single cell sequencing. |\nIf external genotyping data is not available, the genotyping-free version demuxlet, freemuxlet, would be recommended. \"\n",
"type": "object",
"definitions": {

    
    
    "input" : {
    "title": "Input",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "plp": {
                "type":
                "string",
                "description": "Type: `string`. Prefix of input files generated by dsc-pileup",
                "help_text": "Type: `string`. Prefix of input files generated by dsc-pileup"
            
            }
    

        ,
                "init_cluster": {
                "type":
                "string",
                "description": "Type: `file`. Input file containing the initial cluster information",
                "help_text": "Type: `file`. Input file containing the initial cluster information."
            
            }
    

        ,
                "nsample": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `2`. Number of samples multiplexed together",
                "help_text": "Type: `integer`, default: `2`. Number of samples multiplexed together"
            ,
                "default": "2"
            }
    

        ,
                "aux_files": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Turn on writing auxilary output files",
                "help_text": "Type: `boolean_true`, default: `false`. Turn on writing auxilary output files"
            ,
                "default": "False"
            }
    

        ,
                "verbose": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `100`. Turn on verbose mode with specific verbosity threshold",
                "help_text": "Type: `integer`, default: `100`. Turn on verbose mode with specific verbosity threshold. 0: fully verbose, 100 : no verbose messages."
            ,
                "default": "100"
            }
    

        ,
                "doublet_prior": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.5`. Prior of doublet",
                "help_text": "Type: `double`, default: `0.5`. Prior of doublet."
            ,
                "default": "0.5"
            }
    

        ,
                "geno_error": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.1`. Genotype error parameter per cluster",
                "help_text": "Type: `double`, default: `0.1`. Genotype error parameter per cluster."
            ,
                "default": "0.1"
            }
    

        ,
                "bf_thres": {
                "type":
                "number",
                "description": "Type: `double`, default: `5.41`. Bayes Factor Threshold used in the initial clustering",
                "help_text": "Type: `double`, default: `5.41`. Bayes Factor Threshold used in the initial clustering."
            ,
                "default": "5.41"
            }
    

        ,
                "frac_init_clust": {
                "type":
                "number",
                "description": "Type: `double`, default: `1`. Fraction of droplets to be clustered in the very first round of initial clustering procedure",
                "help_text": "Type: `double`, default: `1`. Fraction of droplets to be clustered in the very first round of initial clustering procedure."
            ,
                "default": "1"
            }
    

        ,
                "iter_init": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `10`. Iteration for initial cluster assignment (set to zero to skip the iterations)",
                "help_text": "Type: `integer`, default: `10`. Iteration for initial cluster assignment (set to zero to skip the iterations)."
            ,
                "default": "10"
            }
    

        ,
                "keep_init_missing": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Keep missing cluster assignment as missing in the initial iteration",
                "help_text": "Type: `boolean_true`, default: `false`. Keep missing cluster assignment as missing in the initial iteration."
            ,
                "default": "False"
            }
    

        ,
                "randomize_singlet_score": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Randomize the singlet scores to test its effect",
                "help_text": "Type: `boolean_true`, default: `false`. Randomize the singlet scores to test its effect."
            ,
                "default": "False"
            }
    

        ,
                "seed": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Seed for random number (use clocks if not set)",
                "help_text": "Type: `integer`, default: `0`. Seed for random number (use clocks if not set)."
            ,
                "default": "0"
            }
    

        ,
                "cap_bq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `20`. Maximum base quality (higher BQ will be capped)",
                "help_text": "Type: `integer`, default: `20`. Maximum base quality (higher BQ will be capped)."
            ,
                "default": "20"
            }
    

        ,
                "min_bq": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `13`. Minimum base quality to consider (lower BQ will be skipped)",
                "help_text": "Type: `integer`, default: `13`. Minimum base quality to consider (lower BQ will be skipped)."
            ,
                "default": "13"
            }
    

        ,
                "group_list": {
                "type":
                "string",
                "description": "Type: `string`. List of tag readgroup/cell barcode to consider in this run",
                "help_text": "Type: `string`. List of tag readgroup/cell barcode to consider in this run. All other barcodes will be ignored. This is useful for parallelized run."
            
            }
    

        ,
                "min_total": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of total reads for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of total reads for a droplet/cell to be considered."
            ,
                "default": "0"
            }
    

        ,
                "min_umi": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of UMIs for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of UMIs for a droplet/cell to be considered."
            ,
                "default": "0"
            }
    

        ,
                "min_snp": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `0`. Minimum number of SNPs with coverage for a droplet/cell to be considered",
                "help_text": "Type: `integer`, default: `0`. Minimum number of SNPs with coverage for a droplet/cell to be considered."
            ,
                "default": "0"
            }
    

}
},
    
    
    "output" : {
    "title": "Output",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output.output`, example: `freemux/`. Output directory",
                "help_text": "Type: `file`, default: `$id.$key.output.output`, example: `freemux/`. Output directory"
            ,
                "default": "$id.$key.output.output"
            }
    

        ,
                "out": {
                "type":
                "string",
                "description": "Type: `string`, example: `freemuxlet`. freemuxlet Output file prefix",
                "help_text": "Type: `string`, example: `freemuxlet`. freemuxlet Output file prefix"
            
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        ,
                "param_list": {
                "type":
                "string",
                "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
                "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",
                "hidden": true
            
            }
    

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/input"
    },

    {
    "$ref": "#/definitions/output"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

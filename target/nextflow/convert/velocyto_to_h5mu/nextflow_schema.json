{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "velocyto_to_h5mu",
    "description": "Convert a velocyto loom file to a h5mu file.\n\nIf an input h5mu file is also provided, the velocity\nh5ad object will get added to that h5mu instead.\n",
    "type": "object",
    "definitions": {
      "inputs" : {
        "title": "Inputs",
        "type": "object",
        "description": "No description",
        "properties": {
          
          "input_loom": {
            "type": "string",
            "description": "Type: `file`, required, example: `input.loom`. Path to the input loom file",
            "help_text": "Type: `file`, required, example: `input.loom`. Path to the input loom file."
          },
          
          "input_h5mu": {
            "type": "string",
            "description": "Type: `file`, example: `input.h5mu`. If a MuData file is provided,",
            "help_text": "Type: `file`, example: `input.h5mu`. If a MuData file is provided,"
          },
          
          "modality": {
            "type": "string",
            "description": "Type: `string`, default: `rna_velocity`. The name of the modality to operate on",
            "help_text": "Type: `string`, default: `rna_velocity`. The name of the modality to operate on.",
            "default": "rna_velocity"
          }
          
        }
      },
      "outputs" : {
        "title": "Outputs",
        "type": "object",
        "description": "No description",
        "properties": {
          
          "output": {
            "type": "string",
            "description": "Type: `file`, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Path to the output MuData file",
            "help_text": "Type: `file`, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Path to the output MuData file.",
            "default": "$id.$key.output.h5mu"
          },
          
          "output_compression": {
            "type": "string",
            "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
            "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
            "enum": ["gzip", "lzf"]
            
          },
          
          "layer_spliced": {
            "type": "string",
            "description": "Type: `string`, default: `velo_spliced`. Output layer for the spliced reads",
            "help_text": "Type: `string`, default: `velo_spliced`. Output layer for the spliced reads.",
            "default": "velo_spliced"
          },
          
          "layer_unspliced": {
            "type": "string",
            "description": "Type: `string`, default: `velo_unspliced`. Output layer for the unspliced reads",
            "help_text": "Type: `string`, default: `velo_unspliced`. Output layer for the unspliced reads.",
            "default": "velo_unspliced"
          },
          
          "layer_ambiguous": {
            "type": "string",
            "description": "Type: `string`, default: `velo_ambiguous`. Output layer for the ambiguous reads",
            "help_text": "Type: `string`, default: `velo_ambiguous`. Output layer for the ambiguous reads.",
            "default": "velo_ambiguous"
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          
          "publish_dir": {
            "type": "string",
            "description": "Type: `string`, required, example: `output/`. Path to an output directory",
            "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
          },
          
          "param_list": {
            "type": "string",
            "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
            "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",            
            "hidden": true
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/inputs"
      },
      {
        "$ref": "#/definitions/outputs"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}

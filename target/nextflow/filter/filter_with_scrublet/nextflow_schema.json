{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "filter_with_scrublet",
"description": "Doublet detection using the Scrublet method (Wolock, Lopez and Klein, 2019).\nThe method tests for potential doublets by using the expression profiles of\ncells to generate synthetic potential doubles which are tested against cells. \nThe method returns a \"doublet score\" on which it calls for potential doublets.\n\nFor the source code please visit https://github.com/AllonKleinLab/scrublet.\n\nFor 10x we expect the doublet rates to be:\n  Multiplet Rate (%) - # of Cells Loaded - # of Cells Recovered\n  ~0.4% ~800 ~500\n  ~0.8% ~1,600 ~1,000\n  ~1.6% ~3,200 ~2,000\n  ~2.3% ~4,800 ~3,000\n  ~3.1% ~6,400 ~4,000\n  ~3.9% ~8,000 ~5,000\n  ~4.6% ~9,600 ~6,000\n  ~5.4% ~11,200 ~7,000\n  ~6.1% ~12,800 ~8,000\n  ~6.9% ~14,400 ~9,000\n  ~7.6% ~16,000 ~10,000\n",
"type": "object",
"definitions": {

    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. Input h5mu file",
                "help_text": "Type: `file`, required, example: `input.h5mu`. Input h5mu file"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default": "rna"
            }
    

        ,
                "output": {
                "type":
                "string",
                "description": "Type: `file`, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file",
                "help_text": "Type: `file`, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file."
            ,
                "default": "$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "obs_name_filter": {
                "type":
                "string",
                "description": "Type: `string`, default: `filter_with_scrublet`. In which ",
                "help_text": "Type: `string`, default: `filter_with_scrublet`. In which .obs slot to store a boolean array corresponding to which observations should be filtered out."
            ,
                "default": "filter_with_scrublet"
            }
    

        ,
                "do_subset": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. Whether to subset before storing the output",
                "help_text": "Type: `boolean_true`, default: `false`. Whether to subset before storing the output."
            ,
                "default": "False"
            }
    

        ,
                "obs_name_doublet_score": {
                "type":
                "string",
                "description": "Type: `string`, default: `scrublet_doublet_score`. Name of the doublet scores column in the obs slot of the returned object",
                "help_text": "Type: `string`, default: `scrublet_doublet_score`. Name of the doublet scores column in the obs slot of the returned object."
            ,
                "default": "scrublet_doublet_score"
            }
    

        ,
                "min_counts": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `2`. The number of minimal UMI counts per cell that have to be present for initial cell detection",
                "help_text": "Type: `integer`, default: `2`. The number of minimal UMI counts per cell that have to be present for initial cell detection."
            ,
                "default": "2"
            }
    

        ,
                "min_cells": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `3`. The number of cells in which UMIs for a gene were detected",
                "help_text": "Type: `integer`, default: `3`. The number of cells in which UMIs for a gene were detected."
            ,
                "default": "3"
            }
    

        ,
                "min_gene_variablity_percent": {
                "type":
                "number",
                "description": "Type: `double`, default: `85`. Used for gene filtering prior to PCA",
                "help_text": "Type: `double`, default: `85`. Used for gene filtering prior to PCA. Keep the most highly variable genes (in the top min_gene_variability_pctl percentile), as measured by the v-statistic [Klein et al., Cell 2015]."
            ,
                "default": "85"
            }
    

        ,
                "num_pca_components": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `30`. Number of principal components to use during PCA dimensionality reduction",
                "help_text": "Type: `integer`, default: `30`. Number of principal components to use during PCA dimensionality reduction."
            ,
                "default": "30"
            }
    

        ,
                "distance_metric": {
                "type":
                "string",
                "description": "Type: `string`, default: `euclidean`. The distance metric used for computing similarities",
                "help_text": "Type: `string`, default: `euclidean`. The distance metric used for computing similarities."
            ,
                "default": "euclidean"
            }
    

        ,
                "allow_automatic_threshold_detection_fail": {
                "type":
                "boolean",
                "description": "Type: `boolean_true`, default: `false`. When scrublet fails to automatically determine the double score threshold, \nallow the component to continue and set the output columns to NA",
                "help_text": "Type: `boolean_true`, default: `false`. When scrublet fails to automatically determine the double score threshold, \nallow the component to continue and set the output columns to NA.\n"
            ,
                "default": "False"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        ,
                "param_list": {
                "type":
                "string",
                "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
                "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",
                "hidden": true
            
            }
    

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "filter_with_counts",
    "description": "Filter scRNA-seq data based on the primary QC metrics. \nThis is based on both the UMI counts, the gene counts \nand the mitochondrial genes (genes starting with mt/MT).\n",
    "type": "object",
    "definitions": {
      "inputs" : {
        "title": "Inputs",
        "type": "object",
        "description": "No description",
        "properties": {
          
          "input": {
            "type": "string",
            "description": "Type: `file`, required, example: `input.h5mu`. Input h5mu file",
            "help_text": "Type: `file`, required, example: `input.h5mu`. Input h5mu file"
          },
          
          "modality": {
            "type": "string",
            "description": "Type: `string`, default: `rna`. ",
            "help_text": "Type: `string`, default: `rna`. ",
            "default": "rna"
          },
          
          "layer": {
            "type": "string",
            "description": "Type: `string`, example: `raw_counts`. ",
            "help_text": "Type: `string`, example: `raw_counts`. "
          },
          
          "var_gene_names": {
            "type": "string",
            "description": "Type: `string`, example: `gene_symbol`. ",
            "help_text": "Type: `string`, example: `gene_symbol`. .var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). \nGene names matching with the regex value from --mitochondrial_gene_regex will be identified\nas a mitochondrial gene.\n"
          },
          
          "mitochondrial_gene_regex": {
            "type": "string",
            "description": "Type: `string`, default: `^[mM][tT]-`. Regex string that identifies mitochondrial genes from --var_gene_names",
            "help_text": "Type: `string`, default: `^[mM][tT]-`. Regex string that identifies mitochondrial genes from --var_gene_names.\nBy default will detect human and mouse mitochondrial genes from a gene symbol.\n",
            "default": "^[mM][tT]-"
          }
          
        }
      },
      "outputs" : {
        "title": "Outputs",
        "type": "object",
        "description": "No description",
        "properties": {
          
          "output": {
            "type": "string",
            "description": "Type: `file`, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file",
            "help_text": "Type: `file`, default: `$id.$key.output.h5mu`, example: `output.h5mu`. Output h5mu file.",
            "default": "$id.$key.output.h5mu"
          },
          
          "output_compression": {
            "type": "string",
            "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object",
            "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression format to be used on the output h5mu object.",
            "enum": ["gzip", "lzf"]
            
          },
          
          "do_subset": {
            "type": "boolean",
            "description": "Type: `boolean_true`, default: `false`. Whether to subset before storing the output",
            "help_text": "Type: `boolean_true`, default: `false`. Whether to subset before storing the output.",
            "default": "False"
          },
          
          "obs_name_filter": {
            "type": "string",
            "description": "Type: `string`, default: `filter_with_counts`. In which ",
            "help_text": "Type: `string`, default: `filter_with_counts`. In which .obs slot to store a boolean array corresponding to which observations should be removed.",
            "default": "filter_with_counts"
          },
          
          "var_name_filter": {
            "type": "string",
            "description": "Type: `string`, default: `filter_with_counts`. In which ",
            "help_text": "Type: `string`, default: `filter_with_counts`. In which .var slot to store a boolean array corresponding to which variables should be removed.",
            "default": "filter_with_counts"
          },
          
          "var_name_mitochondrial_genes": {
            "type": "string",
            "description": "Type: `string`. In which ",
            "help_text": "Type: `string`. In which .var slot to store a boolean array corresponding the mitochondrial genes.\nWill only be used if --min_fraction_mito or --max_fraction_mito are specified.\n"
          }
          
        }
      },
      "arguments" : {
        "title": "Arguments",
        "type": "object",
        "description": "No description",
        "properties": {
          
          "min_counts": {
            "type": "integer",
            "description": "Type: `integer`, example: `200`. Minimum number of counts captured per cell",
            "help_text": "Type: `integer`, example: `200`. Minimum number of counts captured per cell."
          },
          
          "max_counts": {
            "type": "integer",
            "description": "Type: `integer`, example: `5000000`. Maximum number of counts captured per cell",
            "help_text": "Type: `integer`, example: `5000000`. Maximum number of counts captured per cell."
          },
          
          "min_genes_per_cell": {
            "type": "integer",
            "description": "Type: `integer`, example: `200`. Minimum of non-zero values per cell",
            "help_text": "Type: `integer`, example: `200`. Minimum of non-zero values per cell."
          },
          
          "max_genes_per_cell": {
            "type": "integer",
            "description": "Type: `integer`, example: `1500000`. Maximum of non-zero values per cell",
            "help_text": "Type: `integer`, example: `1500000`. Maximum of non-zero values per cell."
          },
          
          "min_cells_per_gene": {
            "type": "integer",
            "description": "Type: `integer`, example: `3`. Minimum of non-zero values per gene",
            "help_text": "Type: `integer`, example: `3`. Minimum of non-zero values per gene."
          },
          
          "min_fraction_mito": {
            "type": "number",
            "description": "Type: `double`, example: `0`. Minimum fraction of UMIs that are mitochondrial",
            "help_text": "Type: `double`, example: `0`. Minimum fraction of UMIs that are mitochondrial."
          },
          
          "max_fraction_mito": {
            "type": "number",
            "description": "Type: `double`, example: `0.2`. Maximum fraction of UMIs that are mitochondrial",
            "help_text": "Type: `double`, example: `0.2`. Maximum fraction of UMIs that are mitochondrial."
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          
          "publish_dir": {
            "type": "string",
            "description": "Type: `string`, required, example: `output/`. Path to an output directory",
            "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
          },
          
          "param_list": {
            "type": "string",
            "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
            "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",            
            "hidden": true
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/inputs"
      },
      {
        "$ref": "#/definitions/outputs"
      },
      {
        "$ref": "#/definitions/arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}

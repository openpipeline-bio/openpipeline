{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "pad_tokenize",
"description": "Tokenize and pad a batch of data for scGPT integration zero-shot inference or fine-tuning.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5ad`. The input h5mu file of pre-processed data",
                "help_text": "Type: `file`, required, example: `input.h5ad`. The input h5mu file of pre-processed data.\n"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default": "rna"
            }
    

        ,
                "model_vocab": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `vocab.json`. Path to model vocabulary file",
                "help_text": "Type: `file`, required, example: `vocab.json`. Path to model vocabulary file.\n"
            
            }
    

        ,
                "input_layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_binned`. The name of the layer to be padded and tokenized",
                "help_text": "Type: `string`, default: `X_binned`. The name of the layer to be padded and tokenized.\n"
            ,
                "default": "X_binned"
            }
    

        ,
                "gene_name_layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `gene_name`. The name of the layer containing gene names",
                "help_text": "Type: `string`, default: `gene_name`. The name of the layer containing gene names.\n"
            ,
                "default": "gene_name"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output_gene_ids": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_gene_ids.pt`, example: `gene_ids.pt`. The output pytorch tensor file containing the gene ids",
                "help_text": "Type: `file`, required, default: `$id.$key.output_gene_ids.pt`, example: `gene_ids.pt`. The output pytorch tensor file containing the gene ids.\n"
            ,
                "default": "$id.$key.output_gene_ids.pt"
            }
    

        ,
                "output_values": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_values.pt`, example: `values.pt`. The output pytorch tensor file contianing the tokenized and padded values",
                "help_text": "Type: `file`, required, default: `$id.$key.output_values.pt`, example: `values.pt`. The output pytorch tensor file contianing the tokenized and padded values.\n"
            ,
                "default": "$id.$key.output_values.pt"
            }
    

        ,
                "output_padding_mask": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_padding_mask.pt`, example: `padding_mask.pt`. The output pytorch tensor file containing the padding mask",
                "help_text": "Type: `file`, required, default: `$id.$key.output_padding_mask.pt`, example: `padding_mask.pt`. The output pytorch tensor file containing the padding mask.\n"
            ,
                "default": "$id.$key.output_padding_mask.pt"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "pad_token": {
                "type":
                "string",
                "description": "Type: `string`, default: `\u003cpad\u003e`. Token used for padding",
                "help_text": "Type: `string`, default: `\u003cpad\u003e`. Token used for padding.\n"
            ,
                "default": "<pad>"
            }
    

        ,
                "pad_value": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `-2`. The value of the padding token",
                "help_text": "Type: `integer`, default: `-2`. The value of the padding token.\n"
            ,
                "default": "-2"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

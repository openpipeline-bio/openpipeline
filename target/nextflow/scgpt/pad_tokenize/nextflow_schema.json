{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "pad_tokenize",
"description": "Tokenize and pad a batch of data for scGPT inference or training.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5ad`. The input h5mu file containing of pre-processed data",
                "help_text": "Type: `file`, required, example: `input.h5ad`. The input h5mu file containing of pre-processed data.\n"
            
            }
    

        ,
                "model_dir": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `foundational_model/scgpt`. The directory containing the model files",
                "help_text": "Type: `file`, required, example: `foundational_model/scgpt`. The directory containing the model files. Must contain \u0027vocab.json\u0027, \u0027model.pt\u0027 and \u0027args.json\u0027 files.\n"
            
            }
    

        ,
                "input_layer": {
                "type":
                "string",
                "description": "Type: `string`, example: `X_binned`. The name of the layer to be padded and tokenized",
                "help_text": "Type: `string`, example: `X_binned`. The name of the layer to be padded and tokenized.\n"
            
            }
    

        ,
                "gene_name_layer": {
                "type":
                "string",
                "description": "Type: `string`, example: `gene_name`. The name of adata",
                "help_text": "Type: `string`, example: `gene_name`. The name of adata.var column containing gene names.\n"
            
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output_gene_ids": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_gene_ids.pt`, example: `gene_ids.pt`. The output pytorch tensor file containing the gene ids",
                "help_text": "Type: `file`, required, default: `$id.$key.output_gene_ids.pt`, example: `gene_ids.pt`. The output pytorch tensor file containing the gene ids.\n"
            ,
                "default": "$id.$key.output_gene_ids.pt"
            }
    

        ,
                "output_values": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_values.pt`, example: `values.pt`. The output pytorch tensor file contianing the tokenized and padded values",
                "help_text": "Type: `file`, required, default: `$id.$key.output_values.pt`, example: `values.pt`. The output pytorch tensor file contianing the tokenized and padded values.\n"
            ,
                "default": "$id.$key.output_values.pt"
            }
    

        ,
                "output_padding_mask": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output_padding_mask.pt`, example: `padding_mask.pt`. The output pytorch tensor file containing the padding mask",
                "help_text": "Type: `file`, required, default: `$id.$key.output_padding_mask.pt`, example: `padding_mask.pt`. The output pytorch tensor file containing the padding mask.\n"
            ,
                "default": "$id.$key.output_padding_mask.pt"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "pad_token": {
                "type":
                "string",
                "description": "Type: `string`, default: `\u003cpad\u003e`. The padding token",
                "help_text": "Type: `string`, default: `\u003cpad\u003e`. The padding token.\n"
            ,
                "default": "<pad>"
            }
    

        ,
                "pad_value": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `-2`. The value to be used for padding",
                "help_text": "Type: `integer`, default: `-2`. The value to be used for padding.\n"
            ,
                "default": "-2"
            }
    

        ,
                "n_hvg": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1200`. The number of highly variable genes to be used for tokenization",
                "help_text": "Type: `integer`, default: `1200`. The number of highly variable genes to be used for tokenization.  \n"
            ,
                "default": "1200"
            }
    

        ,
                "load_model_vocab": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether to load the vocabulary from the model or use pytorch vocab",
                "help_text": "Type: `boolean`, default: `true`. Whether to load the vocabulary from the model or use pytorch vocab.\n"
            ,
                "default": "True"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

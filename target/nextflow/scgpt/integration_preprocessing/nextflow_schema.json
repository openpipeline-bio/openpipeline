{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "integration_preprocessing",
"description": "Preprocess data for scGPT fine-tuning or zero-shot inference.\n",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "inputs" : {
    "title": "Inputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `input.h5mu`. Input h5mu file",
                "help_text": "Type: `file`, required, example: `input.h5mu`. Input h5mu file.\n"
            
            }
    

        ,
                "modality": {
                "type":
                "string",
                "description": "Type: `string`, default: `rna`. ",
                "help_text": "Type: `string`, default: `rna`. "
            ,
                "default": "rna"
            }
    

        ,
                "model_dir": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `foundational_model/scgpt`. The directory containing the model files",
                "help_text": "Type: `file`, required, example: `foundational_model/scgpt`. The directory containing the model files. Must contain \u0027vocab.json\u0027, \u0027model.pt\u0027 and \u0027args.json\u0027 files.\n"
            
            }
    

        ,
                "input_layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `X`. The key in the mudata layer to use as raw data",
                "help_text": "Type: `string`, default: `X`. The key in the mudata layer to use as raw data.\n"
            ,
                "default": "X"
            }
    

        ,
                "ori_batch_layer_name": {
                "type":
                "string",
                "description": "Type: `string`, default: `sample`. The column in the adata",
                "help_text": "Type: `string`, default: `sample`. The column in the adata.obs that contains the batch information.\n"
            ,
                "default": "sample"
            }
    

        ,
                "gene_name_layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `gene_name`. The name of adata",
                "help_text": "Type: `string`, default: `gene_name`. The name of adata.var column containing the gene names.\n"
            ,
                "default": "gene_name"
            }
    

}
},
    
    
    "outputs" : {
    "title": "Outputs",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. The output h5mu file containing the preprocessed data",
                "help_text": "Type: `file`, required, default: `$id.$key.output.h5mu`, example: `output.h5mu`. The output h5mu file containing the preprocessed data.    \n"
            ,
                "default": "$id.$key.output.h5mu"
            }
    

        ,
                "output_compression": {
                "type":
                "string",
                "description": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression algorithm to use for the output h5mu file",
                "help_text": "Type: `string`, example: `gzip`, choices: ``gzip`, `lzf``. The compression algorithm to use for the output h5mu file.\n",
                "enum": ["gzip", "lzf"]
            
            
            }
    

        ,
                "batch_id_layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `batch_id`. The name of the adata",
                "help_text": "Type: `string`, default: `batch_id`. The name of the adata.obs column to write categorical batch ids to.\n"
            ,
                "default": "batch_id"
            }
    

        ,
                "normalized_total_layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_normed`. The name of the adata layer to write the normalized total counts to",
                "help_text": "Type: `string`, default: `X_normed`. The name of the adata layer to write the normalized total counts to.\n"
            ,
                "default": "X_normed"
            }
    

        ,
                "binned_layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_binned`. The name of the adata layer to write the binned data to",
                "help_text": "Type: `string`, default: `X_binned`. The name of the adata layer to write the binned data to.\n"
            ,
                "default": "X_binned"
            }
    

        ,
                "log1p_layer": {
                "type":
                "string",
                "description": "Type: `string`, default: `X_log1p`. The name of the adata layer to write the log1p transformed data to",
                "help_text": "Type: `string`, default: `X_log1p`. The name of the adata layer to write the log1p transformed data to. Will only be written if \u0027data_is_raw\u0027 flag is set to true.\n"
            ,
                "default": "X_log1p"
            }
    

}
},
    
    
    "arguments" : {
    "title": "Arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "pad_token": {
                "type":
                "string",
                "description": "Type: `string`, default: `\u003cpad\u003e`. Token used for padding",
                "help_text": "Type: `string`, default: `\u003cpad\u003e`. Token used for padding.\n"
            ,
                "default": "<pad>"
            }
    

        ,
                "filter_gene_by_counts": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `3`. Number of counts to filter genes by",
                "help_text": "Type: `integer`, default: `3`. Number of counts to filter genes by. Set to -1 if no gene count filtering should be performed.\n"
            ,
                "default": "3"
            }
    

        ,
                "filter_cell_by_counts": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `-1`. Number of counts to filter cells by",
                "help_text": "Type: `integer`, default: `-1`. Number of counts to filter cells by. Set to -1 if no cell count filtering should be performed.\n"
            ,
                "default": "-1"
            }
    

        ,
                "n_hvg": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `1200`. The number of highly variable genes to be subset for tokenization",
                "help_text": "Type: `integer`, default: `1200`. The number of highly variable genes to be subset for tokenization. Set to -1 if no hvg subsetting should be performed.\n"
            ,
                "default": "1200"
            }
    

        ,
                "normalize_total": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `10000`. The total counts to normalize the data to",
                "help_text": "Type: `integer`, default: `10000`. The total counts to normalize the data to. Set to -1 if no normalization should be performed.\n"
            ,
                "default": "10000"
            }
    

        ,
                "data_is_raw": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether the input data is raw and needs to be log1p transformed",
                "help_text": "Type: `boolean`, default: `true`. Whether the input data is raw and needs to be log1p transformed.\n"
            ,
                "default": "True"
            }
    

        ,
                "n_input_bins": {
                "type":
                "integer",
                "description": "Type: `integer`, default: `51`. The number of bins to discretize the input data into",
                "help_text": "Type: `integer`, default: `51`. The number of bins to discretize the input data into.\n"
            ,
                "default": "51"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/inputs"
    },

    {
    "$ref": "#/definitions/outputs"
    },

    {
    "$ref": "#/definitions/arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}

{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "star_build_reference",
    "description": "Create a reference for STAR from a set of fasta files.",
    "type": "object",
    "definitions": {
      "input/output" : {
        "title": "Input/Output",
        "type": "object",
        "description": "No description",
        "properties": {
          
          "genome_fasta": {
            "type": "string",
            "description": "Type: List of `file`, required, example: `chr1.fasta chr2.fasta`, multiple_sep: `\" \"`. The fasta files to be included in the reference",
            "help_text": "Type: List of `file`, required, example: `chr1.fasta chr2.fasta`, multiple_sep: `\" \"`. The fasta files to be included in the reference. Corresponds to the --genomeFastaFiles argument in the STAR command."
          },
          
          "transcriptome_gtf": {
            "type": "string",
            "description": "Type: `file`. Specifies the path to the file with annotated transcripts in the standard GTF\nformat",
            "help_text": "Type: `file`. Specifies the path to the file with annotated transcripts in the standard GTF\nformat. STAR will extract splice junctions from this file and use them to greatly improve\naccuracy of the mapping. Corresponds to the --sjdbGTFfile argument in the STAR command.\n"
          },
          
          "output": {
            "type": "string",
            "description": "Type: `file`, required, default: `$id.$key.output.output`, example: `/path/to/foo`. Path to output directory",
            "help_text": "Type: `file`, required, default: `$id.$key.output.output`, example: `/path/to/foo`. Path to output directory. Corresponds to the --genomeDir argument in the STAR command.",
            "default": "$id.$key.output.output"
          }
          
        }
      },
      "genome indexing arguments" : {
        "title": "Genome indexing arguments",
        "type": "object",
        "description": "No description",
        "properties": {
          
          "genomeSAindexNbases": {
            "type": "integer",
            "description": "Type: `integer`, default: `14`. Length (bases) of the SA pre-indexing string",
            "help_text": "Type: `integer`, default: `14`. Length (bases) of the SA pre-indexing string. Typically between 10 and 15.\nLonger strings will use much more memory, but allow faster searches. For small\ngenomes, the parameter {genomeSAindexNbases must be scaled down to\nmin(14, log2(GenomeLength)/2 - 1).\n",
            "default": "14"
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          
          "publish_dir": {
            "type": "string",
            "description": "Type: `string`, required, example: `output/`. Path to an output directory",
            "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
          },
          
          "param_list": {
            "type": "string",
            "description": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel",
            "help_text": "Type: `string`, example: `my_params.yaml`. Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.",            
            "hidden": true
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/input/output"
      },
      {
        "$ref": "#/definitions/genome indexing arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}

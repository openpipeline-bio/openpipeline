{
"$schema": "http://json-schema.org/draft-07/schema",
"title": "multi_star",
"description": "Align fastq files using STAR.",
"type": "object",
"definitions": {

    
    "Dataset input": {
        "title": "Dataset input",
        "type": "object",
        "description": "Dataset input using nf-tower \"dataset\" or \"data explorer\". Allows for the input of multiple         parameter sets to initialise a Nextflow channel.",
        "properties": {
            "param_list": {
                "description": "Dataset input can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml                 blob. The names of the input fields (e.g. csv columns, json keys) need to be an exact match with the workflow input parameters.",
                "default": "",
                "format": "file-path",
                "mimetype": "text/csv",
                "pattern": "^\\S+\\.csv$"
            }
        }
    },

    
    
    "input/output" : {
    "title": "Input/Output",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "input_id": {
                "type":
                "string",
                "description": "Type: List of `string`, required, example: `mysample;mysample`, multiple_sep: `\";\"`. The ID of the sample being processed",
                "help_text": "Type: List of `string`, required, example: `mysample;mysample`, multiple_sep: `\";\"`. The ID of the sample being processed. This vector should have the same length as the `--input_r1` argument."
            
            }
    

        ,
                "input_r1": {
                "type":
                "string",
                "description": "Type: List of `file`, required, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L002_R1_001.fastq.gz`, multiple_sep: `\";\"`. Paths to the sequences to be mapped",
                "help_text": "Type: List of `file`, required, example: `mysample_S1_L001_R1_001.fastq.gz;mysample_S1_L002_R1_001.fastq.gz`, multiple_sep: `\";\"`. Paths to the sequences to be mapped. If using Illumina paired-end reads, only the R1 files should be passed."
            
            }
    

        ,
                "input_r2": {
                "type":
                "string",
                "description": "Type: List of `file`, example: `mysample_S1_L001_R2_001.fastq.gz;mysample_S1_L002_R2_001.fastq.gz`, multiple_sep: `\";\"`. Paths to the sequences to be mapped",
                "help_text": "Type: List of `file`, example: `mysample_S1_L001_R2_001.fastq.gz;mysample_S1_L002_R2_001.fastq.gz`, multiple_sep: `\";\"`. Paths to the sequences to be mapped. If using Illumina paired-end reads, only the R2 files should be passed."
            
            }
    

        ,
                "reference_index": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `/path/to/reference`. Path to the reference built by star_build_reference",
                "help_text": "Type: `file`, required, example: `/path/to/reference`. Path to the reference built by star_build_reference. Corresponds to the --genomeDir argument in the STAR command."
            
            }
    

        ,
                "reference_gtf": {
                "type":
                "string",
                "description": "Type: `file`, required, example: `genes.gtf`. Path to the gtf reference file",
                "help_text": "Type: `file`, required, example: `genes.gtf`. Path to the gtf reference file."
            
            }
    

        ,
                "output": {
                "type":
                "string",
                "description": "Type: `file`, required, default: `$id.$key.output.output`, example: `/path/to/foo`. Path to output directory",
                "help_text": "Type: `file`, required, default: `$id.$key.output.output`, example: `/path/to/foo`. Path to output directory. Corresponds to the --outFileNamePrefix argument in the STAR command."
            ,
                "default": "$id.$key.output.output"
            }
    

}
},
    
    
    "processing arguments" : {
    "title": "Processing arguments",
    "type": "object",
    "description": "No description",
    "properties": {
    
        
                "run_htseq_count": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether or not to also run htseq-count after STAR",
                "help_text": "Type: `boolean`, default: `true`. Whether or not to also run htseq-count after STAR."
            ,
                "default": "True"
            }
    

        ,
                "run_multiqc": {
                "type":
                "boolean",
                "description": "Type: `boolean`, default: `true`. Whether or not to also run MultiQC at the end",
                "help_text": "Type: `boolean`, default: `true`. Whether or not to also run MultiQC at the end."
            ,
                "default": "True"
            }
    

        ,
                "min_success_rate": {
                "type":
                "number",
                "description": "Type: `double`, default: `0.5`. Fail when the success rate is below this threshold",
                "help_text": "Type: `double`, default: `0.5`. Fail when the success rate is below this threshold."
            ,
                "default": "0.5"
            }
    

}
},
    
    
    "nextflow input-output arguments" : {
    "title": "Nextflow input-output arguments",
    "type": "object",
    "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
    "properties": {
    
        
                "publish_dir": {
                "type":
                "string",
                "description": "Type: `string`, required, example: `output/`. Path to an output directory",
                "help_text": "Type: `string`, required, example: `output/`. Path to an output directory."
            
            }
    

        

}
}
},
"allOf": [

    {
    "$ref": "#/definitions/input/output"
    },

    {
    "$ref": "#/definitions/processing arguments"
    },

    {
    "$ref": "#/definitions/nextflow input-output arguments"
    }
]
}
